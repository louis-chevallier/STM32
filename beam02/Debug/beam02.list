
beam02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003078  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003200  08003200  00004200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003218  08003218  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003218  08003218  00004218  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003220  08003220  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08003220  08003220  00004220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003228  08003228  00004228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800322c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000500c  2**0
                  CONTENTS
 10 .bss          0000a994  2000000c  2000000c  0000500c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  2000a9a0  2000a9a0  0000500c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c28f  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000203a  00000000  00000000  000112cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c60  00000000  00000000  00013308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000987  00000000  00000000  00013f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023676  00000000  00000000  000148ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d60a  00000000  00000000  00037f65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3bc4  00000000  00000000  0004556f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00119133  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000033cc  00000000  00000000  00119178  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000058  00000000  00000000  0011c544  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080031e8 	.word	0x080031e8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080031e8 	.word	0x080031e8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f8:	f000 fcf4 	bl	8000ee4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fc:	f000 f80e 	bl	800051c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000500:	f000 f9a0 	bl	8000844 <MX_GPIO_Init>
  MX_DMA_Init();
 8000504:	f000 f968 	bl	80007d8 <MX_DMA_Init>
  MX_ADC1_Init();
 8000508:	f000 f870 	bl	80005ec <MX_ADC1_Init>
  MX_TIM2_Init();
 800050c:	f000 f8ea 	bl	80006e4 <MX_TIM2_Init>
  MX_DAC_Init();
 8000510:	f000 f8be 	bl	8000690 <MX_DAC_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    loop_body();
 8000514:	f000 fa30 	bl	8000978 <loop_body>
 8000518:	e7fc      	b.n	8000514 <main+0x20>
	...

0800051c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b094      	sub	sp, #80	@ 0x50
 8000520:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000522:	f107 0320 	add.w	r3, r7, #32
 8000526:	2230      	movs	r2, #48	@ 0x30
 8000528:	2100      	movs	r1, #0
 800052a:	4618      	mov	r0, r3
 800052c:	f002 fe30 	bl	8003190 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000530:	f107 030c 	add.w	r3, r7, #12
 8000534:	2200      	movs	r2, #0
 8000536:	601a      	str	r2, [r3, #0]
 8000538:	605a      	str	r2, [r3, #4]
 800053a:	609a      	str	r2, [r3, #8]
 800053c:	60da      	str	r2, [r3, #12]
 800053e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000540:	2300      	movs	r3, #0
 8000542:	60bb      	str	r3, [r7, #8]
 8000544:	4b27      	ldr	r3, [pc, #156]	@ (80005e4 <SystemClock_Config+0xc8>)
 8000546:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000548:	4a26      	ldr	r2, [pc, #152]	@ (80005e4 <SystemClock_Config+0xc8>)
 800054a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800054e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000550:	4b24      	ldr	r3, [pc, #144]	@ (80005e4 <SystemClock_Config+0xc8>)
 8000552:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000554:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000558:	60bb      	str	r3, [r7, #8]
 800055a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800055c:	2300      	movs	r3, #0
 800055e:	607b      	str	r3, [r7, #4]
 8000560:	4b21      	ldr	r3, [pc, #132]	@ (80005e8 <SystemClock_Config+0xcc>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	4a20      	ldr	r2, [pc, #128]	@ (80005e8 <SystemClock_Config+0xcc>)
 8000566:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800056a:	6013      	str	r3, [r2, #0]
 800056c:	4b1e      	ldr	r3, [pc, #120]	@ (80005e8 <SystemClock_Config+0xcc>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000574:	607b      	str	r3, [r7, #4]
 8000576:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000578:	2302      	movs	r3, #2
 800057a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800057c:	2301      	movs	r3, #1
 800057e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000580:	2310      	movs	r3, #16
 8000582:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000584:	2302      	movs	r3, #2
 8000586:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000588:	2300      	movs	r3, #0
 800058a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800058c:	2308      	movs	r3, #8
 800058e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 80;
 8000590:	2350      	movs	r3, #80	@ 0x50
 8000592:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000594:	2302      	movs	r3, #2
 8000596:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000598:	2304      	movs	r3, #4
 800059a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800059c:	f107 0320 	add.w	r3, r7, #32
 80005a0:	4618      	mov	r0, r3
 80005a2:	f001 fded 	bl	8002180 <HAL_RCC_OscConfig>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005ac:	f000 f9de 	bl	800096c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b0:	230f      	movs	r3, #15
 80005b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b4:	2302      	movs	r3, #2
 80005b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b8:	2300      	movs	r3, #0
 80005ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c2:	2300      	movs	r3, #0
 80005c4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005c6:	f107 030c 	add.w	r3, r7, #12
 80005ca:	2102      	movs	r1, #2
 80005cc:	4618      	mov	r0, r3
 80005ce:	f002 f84f 	bl	8002670 <HAL_RCC_ClockConfig>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80005d8:	f000 f9c8 	bl	800096c <Error_Handler>
  }
}
 80005dc:	bf00      	nop
 80005de:	3750      	adds	r7, #80	@ 0x50
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	40023800 	.word	0x40023800
 80005e8:	40007000 	.word	0x40007000

080005ec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005f2:	463b      	mov	r3, r7
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
 80005f8:	605a      	str	r2, [r3, #4]
 80005fa:	609a      	str	r2, [r3, #8]
 80005fc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005fe:	4b21      	ldr	r3, [pc, #132]	@ (8000684 <MX_ADC1_Init+0x98>)
 8000600:	4a21      	ldr	r2, [pc, #132]	@ (8000688 <MX_ADC1_Init+0x9c>)
 8000602:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000604:	4b1f      	ldr	r3, [pc, #124]	@ (8000684 <MX_ADC1_Init+0x98>)
 8000606:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800060a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800060c:	4b1d      	ldr	r3, [pc, #116]	@ (8000684 <MX_ADC1_Init+0x98>)
 800060e:	2200      	movs	r2, #0
 8000610:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000612:	4b1c      	ldr	r3, [pc, #112]	@ (8000684 <MX_ADC1_Init+0x98>)
 8000614:	2201      	movs	r2, #1
 8000616:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000618:	4b1a      	ldr	r3, [pc, #104]	@ (8000684 <MX_ADC1_Init+0x98>)
 800061a:	2201      	movs	r2, #1
 800061c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800061e:	4b19      	ldr	r3, [pc, #100]	@ (8000684 <MX_ADC1_Init+0x98>)
 8000620:	2200      	movs	r2, #0
 8000622:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000626:	4b17      	ldr	r3, [pc, #92]	@ (8000684 <MX_ADC1_Init+0x98>)
 8000628:	2200      	movs	r2, #0
 800062a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800062c:	4b15      	ldr	r3, [pc, #84]	@ (8000684 <MX_ADC1_Init+0x98>)
 800062e:	4a17      	ldr	r2, [pc, #92]	@ (800068c <MX_ADC1_Init+0xa0>)
 8000630:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000632:	4b14      	ldr	r3, [pc, #80]	@ (8000684 <MX_ADC1_Init+0x98>)
 8000634:	2200      	movs	r2, #0
 8000636:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000638:	4b12      	ldr	r3, [pc, #72]	@ (8000684 <MX_ADC1_Init+0x98>)
 800063a:	2201      	movs	r2, #1
 800063c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800063e:	4b11      	ldr	r3, [pc, #68]	@ (8000684 <MX_ADC1_Init+0x98>)
 8000640:	2201      	movs	r2, #1
 8000642:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000646:	4b0f      	ldr	r3, [pc, #60]	@ (8000684 <MX_ADC1_Init+0x98>)
 8000648:	2201      	movs	r2, #1
 800064a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800064c:	480d      	ldr	r0, [pc, #52]	@ (8000684 <MX_ADC1_Init+0x98>)
 800064e:	f000 fcdf 	bl	8001010 <HAL_ADC_Init>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000658:	f000 f988 	bl	800096c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800065c:	2306      	movs	r3, #6
 800065e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000660:	2301      	movs	r3, #1
 8000662:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000664:	2300      	movs	r3, #0
 8000666:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000668:	463b      	mov	r3, r7
 800066a:	4619      	mov	r1, r3
 800066c:	4805      	ldr	r0, [pc, #20]	@ (8000684 <MX_ADC1_Init+0x98>)
 800066e:	f000 fd13 	bl	8001098 <HAL_ADC_ConfigChannel>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000678:	f000 f978 	bl	800096c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800067c:	bf00      	nop
 800067e:	3710      	adds	r7, #16
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	20000028 	.word	0x20000028
 8000688:	40012000 	.word	0x40012000
 800068c:	0f000001 	.word	0x0f000001

08000690 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000696:	463b      	mov	r3, r7
 8000698:	2200      	movs	r2, #0
 800069a:	601a      	str	r2, [r3, #0]
 800069c:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800069e:	4b0f      	ldr	r3, [pc, #60]	@ (80006dc <MX_DAC_Init+0x4c>)
 80006a0:	4a0f      	ldr	r2, [pc, #60]	@ (80006e0 <MX_DAC_Init+0x50>)
 80006a2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80006a4:	480d      	ldr	r0, [pc, #52]	@ (80006dc <MX_DAC_Init+0x4c>)
 80006a6:	f001 f826 	bl	80016f6 <HAL_DAC_Init>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80006b0:	f000 f95c 	bl	800096c <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_SOFTWARE;
 80006b4:	233c      	movs	r3, #60	@ 0x3c
 80006b6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80006b8:	2300      	movs	r3, #0
 80006ba:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80006bc:	463b      	mov	r3, r7
 80006be:	2210      	movs	r2, #16
 80006c0:	4619      	mov	r1, r3
 80006c2:	4806      	ldr	r0, [pc, #24]	@ (80006dc <MX_DAC_Init+0x4c>)
 80006c4:	f001 f863 	bl	800178e <HAL_DAC_ConfigChannel>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80006ce:	f000 f94d 	bl	800096c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80006d2:	bf00      	nop
 80006d4:	3708      	adds	r7, #8
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	200000d0 	.word	0x200000d0
 80006e0:	40007400 	.word	0x40007400

080006e4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b08a      	sub	sp, #40	@ 0x28
 80006e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006ea:	f107 0320 	add.w	r3, r7, #32
 80006ee:	2200      	movs	r2, #0
 80006f0:	601a      	str	r2, [r3, #0]
 80006f2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006f4:	1d3b      	adds	r3, r7, #4
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
 80006fa:	605a      	str	r2, [r3, #4]
 80006fc:	609a      	str	r2, [r3, #8]
 80006fe:	60da      	str	r2, [r3, #12]
 8000700:	611a      	str	r2, [r3, #16]
 8000702:	615a      	str	r2, [r3, #20]
 8000704:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000706:	4b33      	ldr	r3, [pc, #204]	@ (80007d4 <MX_TIM2_Init+0xf0>)
 8000708:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800070c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800070e:	4b31      	ldr	r3, [pc, #196]	@ (80007d4 <MX_TIM2_Init+0xf0>)
 8000710:	2200      	movs	r2, #0
 8000712:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000714:	4b2f      	ldr	r3, [pc, #188]	@ (80007d4 <MX_TIM2_Init+0xf0>)
 8000716:	2200      	movs	r2, #0
 8000718:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800071a:	4b2e      	ldr	r3, [pc, #184]	@ (80007d4 <MX_TIM2_Init+0xf0>)
 800071c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000720:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000722:	4b2c      	ldr	r3, [pc, #176]	@ (80007d4 <MX_TIM2_Init+0xf0>)
 8000724:	2200      	movs	r2, #0
 8000726:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000728:	4b2a      	ldr	r3, [pc, #168]	@ (80007d4 <MX_TIM2_Init+0xf0>)
 800072a:	2200      	movs	r2, #0
 800072c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800072e:	4829      	ldr	r0, [pc, #164]	@ (80007d4 <MX_TIM2_Init+0xf0>)
 8000730:	f002 f94a 	bl	80029c8 <HAL_TIM_PWM_Init>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800073a:	f000 f917 	bl	800096c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800073e:	2300      	movs	r3, #0
 8000740:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000742:	2300      	movs	r3, #0
 8000744:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000746:	f107 0320 	add.w	r3, r7, #32
 800074a:	4619      	mov	r1, r3
 800074c:	4821      	ldr	r0, [pc, #132]	@ (80007d4 <MX_TIM2_Init+0xf0>)
 800074e:	f002 fca3 	bl	8003098 <HAL_TIMEx_MasterConfigSynchronization>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000758:	f000 f908 	bl	800096c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800075c:	2360      	movs	r3, #96	@ 0x60
 800075e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000760:	2300      	movs	r3, #0
 8000762:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000764:	2300      	movs	r3, #0
 8000766:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000768:	2300      	movs	r3, #0
 800076a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800076c:	1d3b      	adds	r3, r7, #4
 800076e:	2200      	movs	r2, #0
 8000770:	4619      	mov	r1, r3
 8000772:	4818      	ldr	r0, [pc, #96]	@ (80007d4 <MX_TIM2_Init+0xf0>)
 8000774:	f002 f978 	bl	8002a68 <HAL_TIM_PWM_ConfigChannel>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800077e:	f000 f8f5 	bl	800096c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000782:	1d3b      	adds	r3, r7, #4
 8000784:	2204      	movs	r2, #4
 8000786:	4619      	mov	r1, r3
 8000788:	4812      	ldr	r0, [pc, #72]	@ (80007d4 <MX_TIM2_Init+0xf0>)
 800078a:	f002 f96d 	bl	8002a68 <HAL_TIM_PWM_ConfigChannel>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000794:	f000 f8ea 	bl	800096c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000798:	1d3b      	adds	r3, r7, #4
 800079a:	2208      	movs	r2, #8
 800079c:	4619      	mov	r1, r3
 800079e:	480d      	ldr	r0, [pc, #52]	@ (80007d4 <MX_TIM2_Init+0xf0>)
 80007a0:	f002 f962 	bl	8002a68 <HAL_TIM_PWM_ConfigChannel>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 80007aa:	f000 f8df 	bl	800096c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80007ae:	1d3b      	adds	r3, r7, #4
 80007b0:	220c      	movs	r2, #12
 80007b2:	4619      	mov	r1, r3
 80007b4:	4807      	ldr	r0, [pc, #28]	@ (80007d4 <MX_TIM2_Init+0xf0>)
 80007b6:	f002 f957 	bl	8002a68 <HAL_TIM_PWM_ConfigChannel>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <MX_TIM2_Init+0xe0>
  {
    Error_Handler();
 80007c0:	f000 f8d4 	bl	800096c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80007c4:	4803      	ldr	r0, [pc, #12]	@ (80007d4 <MX_TIM2_Init+0xf0>)
 80007c6:	f000 fab5 	bl	8000d34 <HAL_TIM_MspPostInit>

}
 80007ca:	bf00      	nop
 80007cc:	3728      	adds	r7, #40	@ 0x28
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	20000144 	.word	0x20000144

080007d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	607b      	str	r3, [r7, #4]
 80007e2:	4b17      	ldr	r3, [pc, #92]	@ (8000840 <MX_DMA_Init+0x68>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e6:	4a16      	ldr	r2, [pc, #88]	@ (8000840 <MX_DMA_Init+0x68>)
 80007e8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80007ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ee:	4b14      	ldr	r3, [pc, #80]	@ (8000840 <MX_DMA_Init+0x68>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	603b      	str	r3, [r7, #0]
 80007fe:	4b10      	ldr	r3, [pc, #64]	@ (8000840 <MX_DMA_Init+0x68>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000802:	4a0f      	ldr	r2, [pc, #60]	@ (8000840 <MX_DMA_Init+0x68>)
 8000804:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000808:	6313      	str	r3, [r2, #48]	@ 0x30
 800080a:	4b0d      	ldr	r3, [pc, #52]	@ (8000840 <MX_DMA_Init+0x68>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000812:	603b      	str	r3, [r7, #0]
 8000814:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000816:	2200      	movs	r2, #0
 8000818:	2100      	movs	r1, #0
 800081a:	2011      	movs	r0, #17
 800081c:	f000 ff35 	bl	800168a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000820:	2011      	movs	r0, #17
 8000822:	f000 ff4e 	bl	80016c2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000826:	2200      	movs	r2, #0
 8000828:	2100      	movs	r1, #0
 800082a:	2038      	movs	r0, #56	@ 0x38
 800082c:	f000 ff2d 	bl	800168a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000830:	2038      	movs	r0, #56	@ 0x38
 8000832:	f000 ff46 	bl	80016c2 <HAL_NVIC_EnableIRQ>

}
 8000836:	bf00      	nop
 8000838:	3708      	adds	r7, #8
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	40023800 	.word	0x40023800

08000844 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b08a      	sub	sp, #40	@ 0x28
 8000848:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084a:	f107 0314 	add.w	r3, r7, #20
 800084e:	2200      	movs	r2, #0
 8000850:	601a      	str	r2, [r3, #0]
 8000852:	605a      	str	r2, [r3, #4]
 8000854:	609a      	str	r2, [r3, #8]
 8000856:	60da      	str	r2, [r3, #12]
 8000858:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	613b      	str	r3, [r7, #16]
 800085e:	4b3f      	ldr	r3, [pc, #252]	@ (800095c <MX_GPIO_Init+0x118>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000862:	4a3e      	ldr	r2, [pc, #248]	@ (800095c <MX_GPIO_Init+0x118>)
 8000864:	f043 0304 	orr.w	r3, r3, #4
 8000868:	6313      	str	r3, [r2, #48]	@ 0x30
 800086a:	4b3c      	ldr	r3, [pc, #240]	@ (800095c <MX_GPIO_Init+0x118>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086e:	f003 0304 	and.w	r3, r3, #4
 8000872:	613b      	str	r3, [r7, #16]
 8000874:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	60fb      	str	r3, [r7, #12]
 800087a:	4b38      	ldr	r3, [pc, #224]	@ (800095c <MX_GPIO_Init+0x118>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087e:	4a37      	ldr	r2, [pc, #220]	@ (800095c <MX_GPIO_Init+0x118>)
 8000880:	f043 0320 	orr.w	r3, r3, #32
 8000884:	6313      	str	r3, [r2, #48]	@ 0x30
 8000886:	4b35      	ldr	r3, [pc, #212]	@ (800095c <MX_GPIO_Init+0x118>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088a:	f003 0320 	and.w	r3, r3, #32
 800088e:	60fb      	str	r3, [r7, #12]
 8000890:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	60bb      	str	r3, [r7, #8]
 8000896:	4b31      	ldr	r3, [pc, #196]	@ (800095c <MX_GPIO_Init+0x118>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089a:	4a30      	ldr	r2, [pc, #192]	@ (800095c <MX_GPIO_Init+0x118>)
 800089c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008a2:	4b2e      	ldr	r3, [pc, #184]	@ (800095c <MX_GPIO_Init+0x118>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008aa:	60bb      	str	r3, [r7, #8]
 80008ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	607b      	str	r3, [r7, #4]
 80008b2:	4b2a      	ldr	r3, [pc, #168]	@ (800095c <MX_GPIO_Init+0x118>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b6:	4a29      	ldr	r2, [pc, #164]	@ (800095c <MX_GPIO_Init+0x118>)
 80008b8:	f043 0301 	orr.w	r3, r3, #1
 80008bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008be:	4b27      	ldr	r3, [pc, #156]	@ (800095c <MX_GPIO_Init+0x118>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c2:	f003 0301 	and.w	r3, r3, #1
 80008c6:	607b      	str	r3, [r7, #4]
 80008c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	603b      	str	r3, [r7, #0]
 80008ce:	4b23      	ldr	r3, [pc, #140]	@ (800095c <MX_GPIO_Init+0x118>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d2:	4a22      	ldr	r2, [pc, #136]	@ (800095c <MX_GPIO_Init+0x118>)
 80008d4:	f043 0302 	orr.w	r3, r3, #2
 80008d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008da:	4b20      	ldr	r3, [pc, #128]	@ (800095c <MX_GPIO_Init+0x118>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008de:	f003 0302 	and.w	r3, r3, #2
 80008e2:	603b      	str	r3, [r7, #0]
 80008e4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80008e6:	2200      	movs	r2, #0
 80008e8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008ec:	481c      	ldr	r0, [pc, #112]	@ (8000960 <MX_GPIO_Init+0x11c>)
 80008ee:	f001 fc2d 	bl	800214c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80008f2:	2200      	movs	r2, #0
 80008f4:	2110      	movs	r1, #16
 80008f6:	481b      	ldr	r0, [pc, #108]	@ (8000964 <MX_GPIO_Init+0x120>)
 80008f8:	f001 fc28 	bl	800214c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80008fc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000900:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000902:	2301      	movs	r3, #1
 8000904:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	2300      	movs	r3, #0
 8000908:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090a:	2300      	movs	r3, #0
 800090c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800090e:	f107 0314 	add.w	r3, r7, #20
 8000912:	4619      	mov	r1, r3
 8000914:	4812      	ldr	r0, [pc, #72]	@ (8000960 <MX_GPIO_Init+0x11c>)
 8000916:	f001 fa7d 	bl	8001e14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800091a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800091e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000920:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000924:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000926:	2300      	movs	r3, #0
 8000928:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800092a:	f107 0314 	add.w	r3, r7, #20
 800092e:	4619      	mov	r1, r3
 8000930:	480d      	ldr	r0, [pc, #52]	@ (8000968 <MX_GPIO_Init+0x124>)
 8000932:	f001 fa6f 	bl	8001e14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000936:	2310      	movs	r3, #16
 8000938:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800093a:	2301      	movs	r3, #1
 800093c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093e:	2300      	movs	r3, #0
 8000940:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000942:	2300      	movs	r3, #0
 8000944:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000946:	f107 0314 	add.w	r3, r7, #20
 800094a:	4619      	mov	r1, r3
 800094c:	4805      	ldr	r0, [pc, #20]	@ (8000964 <MX_GPIO_Init+0x120>)
 800094e:	f001 fa61 	bl	8001e14 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000952:	bf00      	nop
 8000954:	3728      	adds	r7, #40	@ 0x28
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	40023800 	.word	0x40023800
 8000960:	40020800 	.word	0x40020800
 8000964:	40020000 	.word	0x40020000
 8000968:	40021400 	.word	0x40021400

0800096c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000970:	b672      	cpsid	i
}
 8000972:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000974:	bf00      	nop
 8000976:	e7fd      	b.n	8000974 <Error_Handler+0x8>

08000978 <loop_body>:


}

int loop_body() 
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
  int v = AD_RES_BUFFER[0]/10;
 800097e:	4b18      	ldr	r3, [pc, #96]	@ (80009e0 <loop_body+0x68>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	4a18      	ldr	r2, [pc, #96]	@ (80009e4 <loop_body+0x6c>)
 8000984:	fba2 2303 	umull	r2, r3, r2, r3
 8000988:	08db      	lsrs	r3, r3, #3
 800098a:	607b      	str	r3, [r7, #4]
  b++;
 800098c:	4b16      	ldr	r3, [pc, #88]	@ (80009e8 <loop_body+0x70>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	3301      	adds	r3, #1
 8000992:	4a15      	ldr	r2, [pc, #84]	@ (80009e8 <loop_body+0x70>)
 8000994:	6013      	str	r3, [r2, #0]
  if (1) {
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, (GPIO_PinState)0);
 8000996:	2200      	movs	r2, #0
 8000998:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800099c:	4813      	ldr	r0, [pc, #76]	@ (80009ec <loop_body+0x74>)
 800099e:	f001 fbd5 	bl	800214c <HAL_GPIO_WritePin>
    HAL_Delay(v);
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	4618      	mov	r0, r3
 80009a6:	f000 fb0f 	bl	8000fc8 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, (GPIO_PinState)1);
 80009aa:	2201      	movs	r2, #1
 80009ac:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009b0:	480e      	ldr	r0, [pc, #56]	@ (80009ec <loop_body+0x74>)
 80009b2:	f001 fbcb 	bl	800214c <HAL_GPIO_WritePin>
    HAL_Delay(v);
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	4618      	mov	r0, r3
 80009ba:	f000 fb05 	bl	8000fc8 <HAL_Delay>
  }
  b++;
 80009be:	4b0a      	ldr	r3, [pc, #40]	@ (80009e8 <loop_body+0x70>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	3301      	adds	r3, #1
 80009c4:	4a08      	ldr	r2, [pc, #32]	@ (80009e8 <loop_body+0x70>)
 80009c6:	6013      	str	r3, [r2, #0]
  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, v);
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	2200      	movs	r2, #0
 80009cc:	2110      	movs	r1, #16
 80009ce:	4808      	ldr	r0, [pc, #32]	@ (80009f0 <loop_body+0x78>)
 80009d0:	f000 feb3 	bl	800173a <HAL_DAC_SetValue>
  return 0;
 80009d4:	2300      	movs	r3, #0
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	3708      	adds	r7, #8
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	2000018c 	.word	0x2000018c
 80009e4:	cccccccd 	.word	0xcccccccd
 80009e8:	2000a998 	.word	0x2000a998
 80009ec:	40020800 	.word	0x40020800
 80009f0:	200000d0 	.word	0x200000d0

080009f4 <_ZN3BufILi219EiEC1Ev>:
  Buf() : p(0) {}
 80009f4:	b480      	push	{r7}
 80009f6:	b083      	sub	sp, #12
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	2200      	movs	r2, #0
 8000a00:	f8c3 236c 	str.w	r2, [r3, #876]	@ 0x36c
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	4618      	mov	r0, r3
 8000a08:	370c      	adds	r7, #12
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr

08000a12 <_ZN3BufILi146EiEC1Ev>:
 8000a12:	b480      	push	{r7}
 8000a14:	b083      	sub	sp, #12
 8000a16:	af00      	add	r7, sp, #0
 8000a18:	6078      	str	r0, [r7, #4]
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	f8c3 2248 	str.w	r2, [r3, #584]	@ 0x248
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	4618      	mov	r0, r3
 8000a26:	370c      	adds	r7, #12
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr

08000a30 <_ZN3BufILi73EiEC1Ev>:
 8000a30:	b480      	push	{r7}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	4618      	mov	r0, r3
 8000a44:	370c      	adds	r7, #12
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
	...

08000a50 <_Z41__static_initialization_and_destruction_0v>:
}
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
Buf<n_samples_i*3, int> buf3;
 8000a54:	4806      	ldr	r0, [pc, #24]	@ (8000a70 <_Z41__static_initialization_and_destruction_0v+0x20>)
 8000a56:	f7ff ffcd 	bl	80009f4 <_ZN3BufILi219EiEC1Ev>
Buf<n_samples_i*2, int> buf2;
 8000a5a:	4806      	ldr	r0, [pc, #24]	@ (8000a74 <_Z41__static_initialization_and_destruction_0v+0x24>)
 8000a5c:	f7ff ffd9 	bl	8000a12 <_ZN3BufILi146EiEC1Ev>
Buf<n_samples_i, int> buf1;
 8000a60:	4805      	ldr	r0, [pc, #20]	@ (8000a78 <_Z41__static_initialization_and_destruction_0v+0x28>)
 8000a62:	f7ff ffe5 	bl	8000a30 <_ZN3BufILi73EiEC1Ev>
Buf<n_samples_i, int> buf_out;
 8000a66:	4805      	ldr	r0, [pc, #20]	@ (8000a7c <_Z41__static_initialization_and_destruction_0v+0x2c>)
 8000a68:	f7ff ffe2 	bl	8000a30 <_ZN3BufILi73EiEC1Ev>
}
 8000a6c:	bf00      	nop
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	2000a18c 	.word	0x2000a18c
 8000a74:	2000a4fc 	.word	0x2000a4fc
 8000a78:	2000a748 	.word	0x2000a748
 8000a7c:	2000a870 	.word	0x2000a870

08000a80 <_GLOBAL__sub_I_AD_RES_BUFFER>:
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
 8000a84:	f7ff ffe4 	bl	8000a50 <_Z41__static_initialization_and_destruction_0v>
 8000a88:	bd80      	pop	{r7, pc}
	...

08000a8c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b083      	sub	sp, #12
 8000a90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	607b      	str	r3, [r7, #4]
 8000a96:	4b10      	ldr	r3, [pc, #64]	@ (8000ad8 <HAL_MspInit+0x4c>)
 8000a98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a9a:	4a0f      	ldr	r2, [pc, #60]	@ (8000ad8 <HAL_MspInit+0x4c>)
 8000a9c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000aa0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000aa2:	4b0d      	ldr	r3, [pc, #52]	@ (8000ad8 <HAL_MspInit+0x4c>)
 8000aa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aa6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000aaa:	607b      	str	r3, [r7, #4]
 8000aac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	603b      	str	r3, [r7, #0]
 8000ab2:	4b09      	ldr	r3, [pc, #36]	@ (8000ad8 <HAL_MspInit+0x4c>)
 8000ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ab6:	4a08      	ldr	r2, [pc, #32]	@ (8000ad8 <HAL_MspInit+0x4c>)
 8000ab8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000abc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000abe:	4b06      	ldr	r3, [pc, #24]	@ (8000ad8 <HAL_MspInit+0x4c>)
 8000ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ac2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ac6:	603b      	str	r3, [r7, #0]
 8000ac8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aca:	bf00      	nop
 8000acc:	370c      	adds	r7, #12
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	40023800 	.word	0x40023800

08000adc <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b08a      	sub	sp, #40	@ 0x28
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae4:	f107 0314 	add.w	r3, r7, #20
 8000ae8:	2200      	movs	r2, #0
 8000aea:	601a      	str	r2, [r3, #0]
 8000aec:	605a      	str	r2, [r3, #4]
 8000aee:	609a      	str	r2, [r3, #8]
 8000af0:	60da      	str	r2, [r3, #12]
 8000af2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a3c      	ldr	r2, [pc, #240]	@ (8000bec <HAL_ADC_MspInit+0x110>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d171      	bne.n	8000be2 <HAL_ADC_MspInit+0x106>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	613b      	str	r3, [r7, #16]
 8000b02:	4b3b      	ldr	r3, [pc, #236]	@ (8000bf0 <HAL_ADC_MspInit+0x114>)
 8000b04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b06:	4a3a      	ldr	r2, [pc, #232]	@ (8000bf0 <HAL_ADC_MspInit+0x114>)
 8000b08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b0e:	4b38      	ldr	r3, [pc, #224]	@ (8000bf0 <HAL_ADC_MspInit+0x114>)
 8000b10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000b16:	613b      	str	r3, [r7, #16]
 8000b18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	60fb      	str	r3, [r7, #12]
 8000b1e:	4b34      	ldr	r3, [pc, #208]	@ (8000bf0 <HAL_ADC_MspInit+0x114>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b22:	4a33      	ldr	r2, [pc, #204]	@ (8000bf0 <HAL_ADC_MspInit+0x114>)
 8000b24:	f043 0301 	orr.w	r3, r3, #1
 8000b28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b2a:	4b31      	ldr	r3, [pc, #196]	@ (8000bf0 <HAL_ADC_MspInit+0x114>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2e:	f003 0301 	and.w	r3, r3, #1
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b36:	2300      	movs	r3, #0
 8000b38:	60bb      	str	r3, [r7, #8]
 8000b3a:	4b2d      	ldr	r3, [pc, #180]	@ (8000bf0 <HAL_ADC_MspInit+0x114>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b3e:	4a2c      	ldr	r2, [pc, #176]	@ (8000bf0 <HAL_ADC_MspInit+0x114>)
 8000b40:	f043 0302 	orr.w	r3, r3, #2
 8000b44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b46:	4b2a      	ldr	r3, [pc, #168]	@ (8000bf0 <HAL_ADC_MspInit+0x114>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b4a:	f003 0302 	and.w	r3, r3, #2
 8000b4e:	60bb      	str	r3, [r7, #8]
 8000b50:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b52:	23c0      	movs	r3, #192	@ 0xc0
 8000b54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b56:	2303      	movs	r3, #3
 8000b58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b5e:	f107 0314 	add.w	r3, r7, #20
 8000b62:	4619      	mov	r1, r3
 8000b64:	4823      	ldr	r0, [pc, #140]	@ (8000bf4 <HAL_ADC_MspInit+0x118>)
 8000b66:	f001 f955 	bl	8001e14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b6a:	2303      	movs	r3, #3
 8000b6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b6e:	2303      	movs	r3, #3
 8000b70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b72:	2300      	movs	r3, #0
 8000b74:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b76:	f107 0314 	add.w	r3, r7, #20
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	481e      	ldr	r0, [pc, #120]	@ (8000bf8 <HAL_ADC_MspInit+0x11c>)
 8000b7e:	f001 f949 	bl	8001e14 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000b82:	4b1e      	ldr	r3, [pc, #120]	@ (8000bfc <HAL_ADC_MspInit+0x120>)
 8000b84:	4a1e      	ldr	r2, [pc, #120]	@ (8000c00 <HAL_ADC_MspInit+0x124>)
 8000b86:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000b88:	4b1c      	ldr	r3, [pc, #112]	@ (8000bfc <HAL_ADC_MspInit+0x120>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b8e:	4b1b      	ldr	r3, [pc, #108]	@ (8000bfc <HAL_ADC_MspInit+0x120>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b94:	4b19      	ldr	r3, [pc, #100]	@ (8000bfc <HAL_ADC_MspInit+0x120>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000b9a:	4b18      	ldr	r3, [pc, #96]	@ (8000bfc <HAL_ADC_MspInit+0x120>)
 8000b9c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ba0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000ba2:	4b16      	ldr	r3, [pc, #88]	@ (8000bfc <HAL_ADC_MspInit+0x120>)
 8000ba4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000ba8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000baa:	4b14      	ldr	r3, [pc, #80]	@ (8000bfc <HAL_ADC_MspInit+0x120>)
 8000bac:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000bb0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000bb2:	4b12      	ldr	r3, [pc, #72]	@ (8000bfc <HAL_ADC_MspInit+0x120>)
 8000bb4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000bb8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000bba:	4b10      	ldr	r3, [pc, #64]	@ (8000bfc <HAL_ADC_MspInit+0x120>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000bc0:	4b0e      	ldr	r3, [pc, #56]	@ (8000bfc <HAL_ADC_MspInit+0x120>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000bc6:	480d      	ldr	r0, [pc, #52]	@ (8000bfc <HAL_ADC_MspInit+0x120>)
 8000bc8:	f000 fe3a 	bl	8001840 <HAL_DMA_Init>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8000bd2:	f7ff fecb 	bl	800096c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	4a08      	ldr	r2, [pc, #32]	@ (8000bfc <HAL_ADC_MspInit+0x120>)
 8000bda:	639a      	str	r2, [r3, #56]	@ 0x38
 8000bdc:	4a07      	ldr	r2, [pc, #28]	@ (8000bfc <HAL_ADC_MspInit+0x120>)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000be2:	bf00      	nop
 8000be4:	3728      	adds	r7, #40	@ 0x28
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	40012000 	.word	0x40012000
 8000bf0:	40023800 	.word	0x40023800
 8000bf4:	40020000 	.word	0x40020000
 8000bf8:	40020400 	.word	0x40020400
 8000bfc:	20000070 	.word	0x20000070
 8000c00:	40026410 	.word	0x40026410

08000c04 <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b08a      	sub	sp, #40	@ 0x28
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c0c:	f107 0314 	add.w	r3, r7, #20
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
 8000c14:	605a      	str	r2, [r3, #4]
 8000c16:	609a      	str	r2, [r3, #8]
 8000c18:	60da      	str	r2, [r3, #12]
 8000c1a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a2f      	ldr	r2, [pc, #188]	@ (8000ce0 <HAL_DAC_MspInit+0xdc>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d158      	bne.n	8000cd8 <HAL_DAC_MspInit+0xd4>
  {
    /* USER CODE BEGIN DAC_MspInit 0 */

    /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	613b      	str	r3, [r7, #16]
 8000c2a:	4b2e      	ldr	r3, [pc, #184]	@ (8000ce4 <HAL_DAC_MspInit+0xe0>)
 8000c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c2e:	4a2d      	ldr	r2, [pc, #180]	@ (8000ce4 <HAL_DAC_MspInit+0xe0>)
 8000c30:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000c34:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c36:	4b2b      	ldr	r3, [pc, #172]	@ (8000ce4 <HAL_DAC_MspInit+0xe0>)
 8000c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c3a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000c3e:	613b      	str	r3, [r7, #16]
 8000c40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	60fb      	str	r3, [r7, #12]
 8000c46:	4b27      	ldr	r3, [pc, #156]	@ (8000ce4 <HAL_DAC_MspInit+0xe0>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c4a:	4a26      	ldr	r2, [pc, #152]	@ (8000ce4 <HAL_DAC_MspInit+0xe0>)
 8000c4c:	f043 0301 	orr.w	r3, r3, #1
 8000c50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c52:	4b24      	ldr	r3, [pc, #144]	@ (8000ce4 <HAL_DAC_MspInit+0xe0>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c56:	f003 0301 	and.w	r3, r3, #1
 8000c5a:	60fb      	str	r3, [r7, #12]
 8000c5c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000c5e:	2320      	movs	r3, #32
 8000c60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c62:	2303      	movs	r3, #3
 8000c64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c66:	2300      	movs	r3, #0
 8000c68:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c6a:	f107 0314 	add.w	r3, r7, #20
 8000c6e:	4619      	mov	r1, r3
 8000c70:	481d      	ldr	r0, [pc, #116]	@ (8000ce8 <HAL_DAC_MspInit+0xe4>)
 8000c72:	f001 f8cf 	bl	8001e14 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC2 Init */
    hdma_dac2.Instance = DMA1_Stream6;
 8000c76:	4b1d      	ldr	r3, [pc, #116]	@ (8000cec <HAL_DAC_MspInit+0xe8>)
 8000c78:	4a1d      	ldr	r2, [pc, #116]	@ (8000cf0 <HAL_DAC_MspInit+0xec>)
 8000c7a:	601a      	str	r2, [r3, #0]
    hdma_dac2.Init.Channel = DMA_CHANNEL_7;
 8000c7c:	4b1b      	ldr	r3, [pc, #108]	@ (8000cec <HAL_DAC_MspInit+0xe8>)
 8000c7e:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8000c82:	605a      	str	r2, [r3, #4]
    hdma_dac2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c84:	4b19      	ldr	r3, [pc, #100]	@ (8000cec <HAL_DAC_MspInit+0xe8>)
 8000c86:	2240      	movs	r2, #64	@ 0x40
 8000c88:	609a      	str	r2, [r3, #8]
    hdma_dac2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c8a:	4b18      	ldr	r3, [pc, #96]	@ (8000cec <HAL_DAC_MspInit+0xe8>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	60da      	str	r2, [r3, #12]
    hdma_dac2.Init.MemInc = DMA_MINC_ENABLE;
 8000c90:	4b16      	ldr	r3, [pc, #88]	@ (8000cec <HAL_DAC_MspInit+0xe8>)
 8000c92:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c96:	611a      	str	r2, [r3, #16]
    hdma_dac2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000c98:	4b14      	ldr	r3, [pc, #80]	@ (8000cec <HAL_DAC_MspInit+0xe8>)
 8000c9a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000c9e:	615a      	str	r2, [r3, #20]
    hdma_dac2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000ca0:	4b12      	ldr	r3, [pc, #72]	@ (8000cec <HAL_DAC_MspInit+0xe8>)
 8000ca2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000ca6:	619a      	str	r2, [r3, #24]
    hdma_dac2.Init.Mode = DMA_CIRCULAR;
 8000ca8:	4b10      	ldr	r3, [pc, #64]	@ (8000cec <HAL_DAC_MspInit+0xe8>)
 8000caa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000cae:	61da      	str	r2, [r3, #28]
    hdma_dac2.Init.Priority = DMA_PRIORITY_LOW;
 8000cb0:	4b0e      	ldr	r3, [pc, #56]	@ (8000cec <HAL_DAC_MspInit+0xe8>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	621a      	str	r2, [r3, #32]
    hdma_dac2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000cb6:	4b0d      	ldr	r3, [pc, #52]	@ (8000cec <HAL_DAC_MspInit+0xe8>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac2) != HAL_OK)
 8000cbc:	480b      	ldr	r0, [pc, #44]	@ (8000cec <HAL_DAC_MspInit+0xe8>)
 8000cbe:	f000 fdbf 	bl	8001840 <HAL_DMA_Init>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <HAL_DAC_MspInit+0xc8>
    {
      Error_Handler();
 8000cc8:	f7ff fe50 	bl	800096c <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac2);
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	4a07      	ldr	r2, [pc, #28]	@ (8000cec <HAL_DAC_MspInit+0xe8>)
 8000cd0:	60da      	str	r2, [r3, #12]
 8000cd2:	4a06      	ldr	r2, [pc, #24]	@ (8000cec <HAL_DAC_MspInit+0xe8>)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END DAC_MspInit 1 */

  }

}
 8000cd8:	bf00      	nop
 8000cda:	3728      	adds	r7, #40	@ 0x28
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	40007400 	.word	0x40007400
 8000ce4:	40023800 	.word	0x40023800
 8000ce8:	40020000 	.word	0x40020000
 8000cec:	200000e4 	.word	0x200000e4
 8000cf0:	400260a0 	.word	0x400260a0

08000cf4 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b085      	sub	sp, #20
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d04:	d10d      	bne.n	8000d22 <HAL_TIM_PWM_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d06:	2300      	movs	r3, #0
 8000d08:	60fb      	str	r3, [r7, #12]
 8000d0a:	4b09      	ldr	r3, [pc, #36]	@ (8000d30 <HAL_TIM_PWM_MspInit+0x3c>)
 8000d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d0e:	4a08      	ldr	r2, [pc, #32]	@ (8000d30 <HAL_TIM_PWM_MspInit+0x3c>)
 8000d10:	f043 0301 	orr.w	r3, r3, #1
 8000d14:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d16:	4b06      	ldr	r3, [pc, #24]	@ (8000d30 <HAL_TIM_PWM_MspInit+0x3c>)
 8000d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d1a:	f003 0301 	and.w	r3, r3, #1
 8000d1e:	60fb      	str	r3, [r7, #12]
 8000d20:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000d22:	bf00      	nop
 8000d24:	3714      	adds	r7, #20
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	40023800 	.word	0x40023800

08000d34 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b08a      	sub	sp, #40	@ 0x28
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d3c:	f107 0314 	add.w	r3, r7, #20
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	605a      	str	r2, [r3, #4]
 8000d46:	609a      	str	r2, [r3, #8]
 8000d48:	60da      	str	r2, [r3, #12]
 8000d4a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d54:	d13c      	bne.n	8000dd0 <HAL_TIM_MspPostInit+0x9c>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d56:	2300      	movs	r3, #0
 8000d58:	613b      	str	r3, [r7, #16]
 8000d5a:	4b1f      	ldr	r3, [pc, #124]	@ (8000dd8 <HAL_TIM_MspPostInit+0xa4>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d5e:	4a1e      	ldr	r2, [pc, #120]	@ (8000dd8 <HAL_TIM_MspPostInit+0xa4>)
 8000d60:	f043 0301 	orr.w	r3, r3, #1
 8000d64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d66:	4b1c      	ldr	r3, [pc, #112]	@ (8000dd8 <HAL_TIM_MspPostInit+0xa4>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d6a:	f003 0301 	and.w	r3, r3, #1
 8000d6e:	613b      	str	r3, [r7, #16]
 8000d70:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d72:	2300      	movs	r3, #0
 8000d74:	60fb      	str	r3, [r7, #12]
 8000d76:	4b18      	ldr	r3, [pc, #96]	@ (8000dd8 <HAL_TIM_MspPostInit+0xa4>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d7a:	4a17      	ldr	r2, [pc, #92]	@ (8000dd8 <HAL_TIM_MspPostInit+0xa4>)
 8000d7c:	f043 0302 	orr.w	r3, r3, #2
 8000d80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d82:	4b15      	ldr	r3, [pc, #84]	@ (8000dd8 <HAL_TIM_MspPostInit+0xa4>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d86:	f003 0302 	and.w	r3, r3, #2
 8000d8a:	60fb      	str	r3, [r7, #12]
 8000d8c:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> TIM2_CH1
    PA3     ------> TIM2_CH4
    PB10     ------> TIM2_CH3
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8000d8e:	2309      	movs	r3, #9
 8000d90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d92:	2302      	movs	r3, #2
 8000d94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d96:	2300      	movs	r3, #0
 8000d98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da2:	f107 0314 	add.w	r3, r7, #20
 8000da6:	4619      	mov	r1, r3
 8000da8:	480c      	ldr	r0, [pc, #48]	@ (8000ddc <HAL_TIM_MspPostInit+0xa8>)
 8000daa:	f001 f833 	bl	8001e14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3;
 8000dae:	f44f 6381 	mov.w	r3, #1032	@ 0x408
 8000db2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db4:	2302      	movs	r3, #2
 8000db6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db8:	2300      	movs	r3, #0
 8000dba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc4:	f107 0314 	add.w	r3, r7, #20
 8000dc8:	4619      	mov	r1, r3
 8000dca:	4805      	ldr	r0, [pc, #20]	@ (8000de0 <HAL_TIM_MspPostInit+0xac>)
 8000dcc:	f001 f822 	bl	8001e14 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000dd0:	bf00      	nop
 8000dd2:	3728      	adds	r7, #40	@ 0x28
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	40023800 	.word	0x40023800
 8000ddc:	40020000 	.word	0x40020000
 8000de0:	40020400 	.word	0x40020400

08000de4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000de8:	bf00      	nop
 8000dea:	e7fd      	b.n	8000de8 <NMI_Handler+0x4>

08000dec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000df0:	bf00      	nop
 8000df2:	e7fd      	b.n	8000df0 <HardFault_Handler+0x4>

08000df4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000df8:	bf00      	nop
 8000dfa:	e7fd      	b.n	8000df8 <MemManage_Handler+0x4>

08000dfc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e00:	bf00      	nop
 8000e02:	e7fd      	b.n	8000e00 <BusFault_Handler+0x4>

08000e04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e08:	bf00      	nop
 8000e0a:	e7fd      	b.n	8000e08 <UsageFault_Handler+0x4>

08000e0c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e10:	bf00      	nop
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr

08000e1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e1a:	b480      	push	{r7}
 8000e1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e1e:	bf00      	nop
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr

08000e28 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e2c:	bf00      	nop
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr

08000e36 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e36:	b580      	push	{r7, lr}
 8000e38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e3a:	f000 f8a5 	bl	8000f88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e3e:	bf00      	nop
 8000e40:	bd80      	pop	{r7, pc}
	...

08000e44 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2);
 8000e48:	4802      	ldr	r0, [pc, #8]	@ (8000e54 <DMA1_Stream6_IRQHandler+0x10>)
 8000e4a:	f000 fda7 	bl	800199c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000e4e:	bf00      	nop
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	200000e4 	.word	0x200000e4

08000e58 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000e5c:	4802      	ldr	r0, [pc, #8]	@ (8000e68 <DMA2_Stream0_IRQHandler+0x10>)
 8000e5e:	f000 fd9d 	bl	800199c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000e62:	bf00      	nop
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	20000070 	.word	0x20000070

08000e6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e70:	4b06      	ldr	r3, [pc, #24]	@ (8000e8c <SystemInit+0x20>)
 8000e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e76:	4a05      	ldr	r2, [pc, #20]	@ (8000e8c <SystemInit+0x20>)
 8000e78:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e7c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e80:	bf00      	nop
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	e000ed00 	.word	0xe000ed00

08000e90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e90:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ec8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000e94:	f7ff ffea 	bl	8000e6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e98:	480c      	ldr	r0, [pc, #48]	@ (8000ecc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e9a:	490d      	ldr	r1, [pc, #52]	@ (8000ed0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e9c:	4a0d      	ldr	r2, [pc, #52]	@ (8000ed4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ea0:	e002      	b.n	8000ea8 <LoopCopyDataInit>

08000ea2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ea2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ea4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ea6:	3304      	adds	r3, #4

08000ea8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ea8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eaa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000eac:	d3f9      	bcc.n	8000ea2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eae:	4a0a      	ldr	r2, [pc, #40]	@ (8000ed8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000eb0:	4c0a      	ldr	r4, [pc, #40]	@ (8000edc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000eb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000eb4:	e001      	b.n	8000eba <LoopFillZerobss>

08000eb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eb8:	3204      	adds	r2, #4

08000eba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ebc:	d3fb      	bcc.n	8000eb6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ebe:	f002 f96f 	bl	80031a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ec2:	f7ff fb17 	bl	80004f4 <main>
  bx  lr    
 8000ec6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ec8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ecc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ed0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ed4:	0800322c 	.word	0x0800322c
  ldr r2, =_sbss
 8000ed8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000edc:	2000a9a0 	.word	0x2000a9a0

08000ee0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ee0:	e7fe      	b.n	8000ee0 <ADC_IRQHandler>
	...

08000ee4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ee8:	4b0e      	ldr	r3, [pc, #56]	@ (8000f24 <HAL_Init+0x40>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a0d      	ldr	r2, [pc, #52]	@ (8000f24 <HAL_Init+0x40>)
 8000eee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ef2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ef4:	4b0b      	ldr	r3, [pc, #44]	@ (8000f24 <HAL_Init+0x40>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a0a      	ldr	r2, [pc, #40]	@ (8000f24 <HAL_Init+0x40>)
 8000efa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000efe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f00:	4b08      	ldr	r3, [pc, #32]	@ (8000f24 <HAL_Init+0x40>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a07      	ldr	r2, [pc, #28]	@ (8000f24 <HAL_Init+0x40>)
 8000f06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f0c:	2003      	movs	r0, #3
 8000f0e:	f000 fbb1 	bl	8001674 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f12:	200f      	movs	r0, #15
 8000f14:	f000 f808 	bl	8000f28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f18:	f7ff fdb8 	bl	8000a8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f1c:	2300      	movs	r3, #0
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	40023c00 	.word	0x40023c00

08000f28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f30:	4b12      	ldr	r3, [pc, #72]	@ (8000f7c <HAL_InitTick+0x54>)
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	4b12      	ldr	r3, [pc, #72]	@ (8000f80 <HAL_InitTick+0x58>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	4619      	mov	r1, r3
 8000f3a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f46:	4618      	mov	r0, r3
 8000f48:	f000 fbc9 	bl	80016de <HAL_SYSTICK_Config>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f52:	2301      	movs	r3, #1
 8000f54:	e00e      	b.n	8000f74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2b0f      	cmp	r3, #15
 8000f5a:	d80a      	bhi.n	8000f72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	6879      	ldr	r1, [r7, #4]
 8000f60:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f64:	f000 fb91 	bl	800168a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f68:	4a06      	ldr	r2, [pc, #24]	@ (8000f84 <HAL_InitTick+0x5c>)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	e000      	b.n	8000f74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f72:	2301      	movs	r3, #1
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	3708      	adds	r7, #8
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	20000000 	.word	0x20000000
 8000f80:	20000008 	.word	0x20000008
 8000f84:	20000004 	.word	0x20000004

08000f88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f8c:	4b06      	ldr	r3, [pc, #24]	@ (8000fa8 <HAL_IncTick+0x20>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	461a      	mov	r2, r3
 8000f92:	4b06      	ldr	r3, [pc, #24]	@ (8000fac <HAL_IncTick+0x24>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4413      	add	r3, r2
 8000f98:	4a04      	ldr	r2, [pc, #16]	@ (8000fac <HAL_IncTick+0x24>)
 8000f9a:	6013      	str	r3, [r2, #0]
}
 8000f9c:	bf00      	nop
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	20000008 	.word	0x20000008
 8000fac:	2000a99c 	.word	0x2000a99c

08000fb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  return uwTick;
 8000fb4:	4b03      	ldr	r3, [pc, #12]	@ (8000fc4 <HAL_GetTick+0x14>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	2000a99c 	.word	0x2000a99c

08000fc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fd0:	f7ff ffee 	bl	8000fb0 <HAL_GetTick>
 8000fd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000fe0:	d005      	beq.n	8000fee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fe2:	4b0a      	ldr	r3, [pc, #40]	@ (800100c <HAL_Delay+0x44>)
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	4413      	add	r3, r2
 8000fec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fee:	bf00      	nop
 8000ff0:	f7ff ffde 	bl	8000fb0 <HAL_GetTick>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	1ad3      	subs	r3, r2, r3
 8000ffa:	68fa      	ldr	r2, [r7, #12]
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	d8f7      	bhi.n	8000ff0 <HAL_Delay+0x28>
  {
  }
}
 8001000:	bf00      	nop
 8001002:	bf00      	nop
 8001004:	3710      	adds	r7, #16
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	20000008 	.word	0x20000008

08001010 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001018:	2300      	movs	r3, #0
 800101a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d101      	bne.n	8001026 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001022:	2301      	movs	r3, #1
 8001024:	e033      	b.n	800108e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800102a:	2b00      	cmp	r3, #0
 800102c:	d109      	bne.n	8001042 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800102e:	6878      	ldr	r0, [r7, #4]
 8001030:	f7ff fd54 	bl	8000adc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2200      	movs	r2, #0
 8001038:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2200      	movs	r2, #0
 800103e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001046:	f003 0310 	and.w	r3, r3, #16
 800104a:	2b00      	cmp	r3, #0
 800104c:	d118      	bne.n	8001080 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001052:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001056:	f023 0302 	bic.w	r3, r3, #2
 800105a:	f043 0202 	orr.w	r2, r3, #2
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f000 f93a 	bl	80012dc <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2200      	movs	r2, #0
 800106c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001072:	f023 0303 	bic.w	r3, r3, #3
 8001076:	f043 0201 	orr.w	r2, r3, #1
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	641a      	str	r2, [r3, #64]	@ 0x40
 800107e:	e001      	b.n	8001084 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001080:	2301      	movs	r3, #1
 8001082:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2200      	movs	r2, #0
 8001088:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800108c:	7bfb      	ldrb	r3, [r7, #15]
}
 800108e:	4618      	mov	r0, r3
 8001090:	3710      	adds	r7, #16
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
	...

08001098 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001098:	b480      	push	{r7}
 800109a:	b085      	sub	sp, #20
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80010a2:	2300      	movs	r3, #0
 80010a4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d101      	bne.n	80010b4 <HAL_ADC_ConfigChannel+0x1c>
 80010b0:	2302      	movs	r3, #2
 80010b2:	e105      	b.n	80012c0 <HAL_ADC_ConfigChannel+0x228>
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2201      	movs	r2, #1
 80010b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	2b09      	cmp	r3, #9
 80010c2:	d925      	bls.n	8001110 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	68d9      	ldr	r1, [r3, #12]
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	b29b      	uxth	r3, r3
 80010d0:	461a      	mov	r2, r3
 80010d2:	4613      	mov	r3, r2
 80010d4:	005b      	lsls	r3, r3, #1
 80010d6:	4413      	add	r3, r2
 80010d8:	3b1e      	subs	r3, #30
 80010da:	2207      	movs	r2, #7
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	43da      	mvns	r2, r3
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	400a      	ands	r2, r1
 80010e8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	68d9      	ldr	r1, [r3, #12]
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	689a      	ldr	r2, [r3, #8]
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	b29b      	uxth	r3, r3
 80010fa:	4618      	mov	r0, r3
 80010fc:	4603      	mov	r3, r0
 80010fe:	005b      	lsls	r3, r3, #1
 8001100:	4403      	add	r3, r0
 8001102:	3b1e      	subs	r3, #30
 8001104:	409a      	lsls	r2, r3
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	430a      	orrs	r2, r1
 800110c:	60da      	str	r2, [r3, #12]
 800110e:	e022      	b.n	8001156 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	6919      	ldr	r1, [r3, #16]
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	b29b      	uxth	r3, r3
 800111c:	461a      	mov	r2, r3
 800111e:	4613      	mov	r3, r2
 8001120:	005b      	lsls	r3, r3, #1
 8001122:	4413      	add	r3, r2
 8001124:	2207      	movs	r2, #7
 8001126:	fa02 f303 	lsl.w	r3, r2, r3
 800112a:	43da      	mvns	r2, r3
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	400a      	ands	r2, r1
 8001132:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	6919      	ldr	r1, [r3, #16]
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	689a      	ldr	r2, [r3, #8]
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	b29b      	uxth	r3, r3
 8001144:	4618      	mov	r0, r3
 8001146:	4603      	mov	r3, r0
 8001148:	005b      	lsls	r3, r3, #1
 800114a:	4403      	add	r3, r0
 800114c:	409a      	lsls	r2, r3
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	430a      	orrs	r2, r1
 8001154:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	2b06      	cmp	r3, #6
 800115c:	d824      	bhi.n	80011a8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685a      	ldr	r2, [r3, #4]
 8001168:	4613      	mov	r3, r2
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	4413      	add	r3, r2
 800116e:	3b05      	subs	r3, #5
 8001170:	221f      	movs	r2, #31
 8001172:	fa02 f303 	lsl.w	r3, r2, r3
 8001176:	43da      	mvns	r2, r3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	400a      	ands	r2, r1
 800117e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	b29b      	uxth	r3, r3
 800118c:	4618      	mov	r0, r3
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	685a      	ldr	r2, [r3, #4]
 8001192:	4613      	mov	r3, r2
 8001194:	009b      	lsls	r3, r3, #2
 8001196:	4413      	add	r3, r2
 8001198:	3b05      	subs	r3, #5
 800119a:	fa00 f203 	lsl.w	r2, r0, r3
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	430a      	orrs	r2, r1
 80011a4:	635a      	str	r2, [r3, #52]	@ 0x34
 80011a6:	e04c      	b.n	8001242 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	2b0c      	cmp	r3, #12
 80011ae:	d824      	bhi.n	80011fa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	685a      	ldr	r2, [r3, #4]
 80011ba:	4613      	mov	r3, r2
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	4413      	add	r3, r2
 80011c0:	3b23      	subs	r3, #35	@ 0x23
 80011c2:	221f      	movs	r2, #31
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	43da      	mvns	r2, r3
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	400a      	ands	r2, r1
 80011d0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	b29b      	uxth	r3, r3
 80011de:	4618      	mov	r0, r3
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	685a      	ldr	r2, [r3, #4]
 80011e4:	4613      	mov	r3, r2
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	4413      	add	r3, r2
 80011ea:	3b23      	subs	r3, #35	@ 0x23
 80011ec:	fa00 f203 	lsl.w	r2, r0, r3
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	430a      	orrs	r2, r1
 80011f6:	631a      	str	r2, [r3, #48]	@ 0x30
 80011f8:	e023      	b.n	8001242 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	685a      	ldr	r2, [r3, #4]
 8001204:	4613      	mov	r3, r2
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	4413      	add	r3, r2
 800120a:	3b41      	subs	r3, #65	@ 0x41
 800120c:	221f      	movs	r2, #31
 800120e:	fa02 f303 	lsl.w	r3, r2, r3
 8001212:	43da      	mvns	r2, r3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	400a      	ands	r2, r1
 800121a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	b29b      	uxth	r3, r3
 8001228:	4618      	mov	r0, r3
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	685a      	ldr	r2, [r3, #4]
 800122e:	4613      	mov	r3, r2
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	4413      	add	r3, r2
 8001234:	3b41      	subs	r3, #65	@ 0x41
 8001236:	fa00 f203 	lsl.w	r2, r0, r3
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	430a      	orrs	r2, r1
 8001240:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001242:	4b22      	ldr	r3, [pc, #136]	@ (80012cc <HAL_ADC_ConfigChannel+0x234>)
 8001244:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a21      	ldr	r2, [pc, #132]	@ (80012d0 <HAL_ADC_ConfigChannel+0x238>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d109      	bne.n	8001264 <HAL_ADC_ConfigChannel+0x1cc>
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	2b12      	cmp	r3, #18
 8001256:	d105      	bne.n	8001264 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a19      	ldr	r2, [pc, #100]	@ (80012d0 <HAL_ADC_ConfigChannel+0x238>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d123      	bne.n	80012b6 <HAL_ADC_ConfigChannel+0x21e>
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	2b10      	cmp	r3, #16
 8001274:	d003      	beq.n	800127e <HAL_ADC_ConfigChannel+0x1e6>
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	2b11      	cmp	r3, #17
 800127c:	d11b      	bne.n	80012b6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	2b10      	cmp	r3, #16
 8001290:	d111      	bne.n	80012b6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001292:	4b10      	ldr	r3, [pc, #64]	@ (80012d4 <HAL_ADC_ConfigChannel+0x23c>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a10      	ldr	r2, [pc, #64]	@ (80012d8 <HAL_ADC_ConfigChannel+0x240>)
 8001298:	fba2 2303 	umull	r2, r3, r2, r3
 800129c:	0c9a      	lsrs	r2, r3, #18
 800129e:	4613      	mov	r3, r2
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	4413      	add	r3, r2
 80012a4:	005b      	lsls	r3, r3, #1
 80012a6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80012a8:	e002      	b.n	80012b0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80012aa:	68bb      	ldr	r3, [r7, #8]
 80012ac:	3b01      	subs	r3, #1
 80012ae:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d1f9      	bne.n	80012aa <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2200      	movs	r2, #0
 80012ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80012be:	2300      	movs	r3, #0
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	3714      	adds	r7, #20
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr
 80012cc:	40012300 	.word	0x40012300
 80012d0:	40012000 	.word	0x40012000
 80012d4:	20000000 	.word	0x20000000
 80012d8:	431bde83 	.word	0x431bde83

080012dc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80012dc:	b480      	push	{r7}
 80012de:	b085      	sub	sp, #20
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80012e4:	4b79      	ldr	r3, [pc, #484]	@ (80014cc <ADC_Init+0x1f0>)
 80012e6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	685a      	ldr	r2, [r3, #4]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	431a      	orrs	r2, r3
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	685a      	ldr	r2, [r3, #4]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001310:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	6859      	ldr	r1, [r3, #4]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	691b      	ldr	r3, [r3, #16]
 800131c:	021a      	lsls	r2, r3, #8
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	430a      	orrs	r2, r1
 8001324:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	685a      	ldr	r2, [r3, #4]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001334:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	6859      	ldr	r1, [r3, #4]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	689a      	ldr	r2, [r3, #8]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	430a      	orrs	r2, r1
 8001346:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	689a      	ldr	r2, [r3, #8]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001356:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	6899      	ldr	r1, [r3, #8]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	68da      	ldr	r2, [r3, #12]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	430a      	orrs	r2, r1
 8001368:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800136e:	4a58      	ldr	r2, [pc, #352]	@ (80014d0 <ADC_Init+0x1f4>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d022      	beq.n	80013ba <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	689a      	ldr	r2, [r3, #8]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001382:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	6899      	ldr	r1, [r3, #8]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	430a      	orrs	r2, r1
 8001394:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	689a      	ldr	r2, [r3, #8]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80013a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	6899      	ldr	r1, [r3, #8]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	430a      	orrs	r2, r1
 80013b6:	609a      	str	r2, [r3, #8]
 80013b8:	e00f      	b.n	80013da <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	689a      	ldr	r2, [r3, #8]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80013c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	689a      	ldr	r2, [r3, #8]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80013d8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	689a      	ldr	r2, [r3, #8]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f022 0202 	bic.w	r2, r2, #2
 80013e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	6899      	ldr	r1, [r3, #8]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	7e1b      	ldrb	r3, [r3, #24]
 80013f4:	005a      	lsls	r2, r3, #1
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	430a      	orrs	r2, r1
 80013fc:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d01b      	beq.n	8001440 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	685a      	ldr	r2, [r3, #4]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001416:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	685a      	ldr	r2, [r3, #4]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001426:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	6859      	ldr	r1, [r3, #4]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001432:	3b01      	subs	r3, #1
 8001434:	035a      	lsls	r2, r3, #13
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	430a      	orrs	r2, r1
 800143c:	605a      	str	r2, [r3, #4]
 800143e:	e007      	b.n	8001450 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	685a      	ldr	r2, [r3, #4]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800144e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800145e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	69db      	ldr	r3, [r3, #28]
 800146a:	3b01      	subs	r3, #1
 800146c:	051a      	lsls	r2, r3, #20
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	430a      	orrs	r2, r1
 8001474:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	689a      	ldr	r2, [r3, #8]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001484:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	6899      	ldr	r1, [r3, #8]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001492:	025a      	lsls	r2, r3, #9
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	430a      	orrs	r2, r1
 800149a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	689a      	ldr	r2, [r3, #8]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80014aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	6899      	ldr	r1, [r3, #8]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	695b      	ldr	r3, [r3, #20]
 80014b6:	029a      	lsls	r2, r3, #10
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	430a      	orrs	r2, r1
 80014be:	609a      	str	r2, [r3, #8]
}
 80014c0:	bf00      	nop
 80014c2:	3714      	adds	r7, #20
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr
 80014cc:	40012300 	.word	0x40012300
 80014d0:	0f000001 	.word	0x0f000001

080014d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b085      	sub	sp, #20
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	f003 0307 	and.w	r3, r3, #7
 80014e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001518 <__NVIC_SetPriorityGrouping+0x44>)
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014ea:	68ba      	ldr	r2, [r7, #8]
 80014ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80014f0:	4013      	ands	r3, r2
 80014f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001500:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001504:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001506:	4a04      	ldr	r2, [pc, #16]	@ (8001518 <__NVIC_SetPriorityGrouping+0x44>)
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	60d3      	str	r3, [r2, #12]
}
 800150c:	bf00      	nop
 800150e:	3714      	adds	r7, #20
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr
 8001518:	e000ed00 	.word	0xe000ed00

0800151c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001520:	4b04      	ldr	r3, [pc, #16]	@ (8001534 <__NVIC_GetPriorityGrouping+0x18>)
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	0a1b      	lsrs	r3, r3, #8
 8001526:	f003 0307 	and.w	r3, r3, #7
}
 800152a:	4618      	mov	r0, r3
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr
 8001534:	e000ed00 	.word	0xe000ed00

08001538 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	4603      	mov	r3, r0
 8001540:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001546:	2b00      	cmp	r3, #0
 8001548:	db0b      	blt.n	8001562 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800154a:	79fb      	ldrb	r3, [r7, #7]
 800154c:	f003 021f 	and.w	r2, r3, #31
 8001550:	4907      	ldr	r1, [pc, #28]	@ (8001570 <__NVIC_EnableIRQ+0x38>)
 8001552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001556:	095b      	lsrs	r3, r3, #5
 8001558:	2001      	movs	r0, #1
 800155a:	fa00 f202 	lsl.w	r2, r0, r2
 800155e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001562:	bf00      	nop
 8001564:	370c      	adds	r7, #12
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	e000e100 	.word	0xe000e100

08001574 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	4603      	mov	r3, r0
 800157c:	6039      	str	r1, [r7, #0]
 800157e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001580:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001584:	2b00      	cmp	r3, #0
 8001586:	db0a      	blt.n	800159e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	b2da      	uxtb	r2, r3
 800158c:	490c      	ldr	r1, [pc, #48]	@ (80015c0 <__NVIC_SetPriority+0x4c>)
 800158e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001592:	0112      	lsls	r2, r2, #4
 8001594:	b2d2      	uxtb	r2, r2
 8001596:	440b      	add	r3, r1
 8001598:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800159c:	e00a      	b.n	80015b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	b2da      	uxtb	r2, r3
 80015a2:	4908      	ldr	r1, [pc, #32]	@ (80015c4 <__NVIC_SetPriority+0x50>)
 80015a4:	79fb      	ldrb	r3, [r7, #7]
 80015a6:	f003 030f 	and.w	r3, r3, #15
 80015aa:	3b04      	subs	r3, #4
 80015ac:	0112      	lsls	r2, r2, #4
 80015ae:	b2d2      	uxtb	r2, r2
 80015b0:	440b      	add	r3, r1
 80015b2:	761a      	strb	r2, [r3, #24]
}
 80015b4:	bf00      	nop
 80015b6:	370c      	adds	r7, #12
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr
 80015c0:	e000e100 	.word	0xe000e100
 80015c4:	e000ed00 	.word	0xe000ed00

080015c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b089      	sub	sp, #36	@ 0x24
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	60f8      	str	r0, [r7, #12]
 80015d0:	60b9      	str	r1, [r7, #8]
 80015d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	f003 0307 	and.w	r3, r3, #7
 80015da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015dc:	69fb      	ldr	r3, [r7, #28]
 80015de:	f1c3 0307 	rsb	r3, r3, #7
 80015e2:	2b04      	cmp	r3, #4
 80015e4:	bf28      	it	cs
 80015e6:	2304      	movcs	r3, #4
 80015e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	3304      	adds	r3, #4
 80015ee:	2b06      	cmp	r3, #6
 80015f0:	d902      	bls.n	80015f8 <NVIC_EncodePriority+0x30>
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	3b03      	subs	r3, #3
 80015f6:	e000      	b.n	80015fa <NVIC_EncodePriority+0x32>
 80015f8:	2300      	movs	r3, #0
 80015fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015fc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001600:	69bb      	ldr	r3, [r7, #24]
 8001602:	fa02 f303 	lsl.w	r3, r2, r3
 8001606:	43da      	mvns	r2, r3
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	401a      	ands	r2, r3
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001610:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	fa01 f303 	lsl.w	r3, r1, r3
 800161a:	43d9      	mvns	r1, r3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001620:	4313      	orrs	r3, r2
         );
}
 8001622:	4618      	mov	r0, r3
 8001624:	3724      	adds	r7, #36	@ 0x24
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
	...

08001630 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	3b01      	subs	r3, #1
 800163c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001640:	d301      	bcc.n	8001646 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001642:	2301      	movs	r3, #1
 8001644:	e00f      	b.n	8001666 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001646:	4a0a      	ldr	r2, [pc, #40]	@ (8001670 <SysTick_Config+0x40>)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	3b01      	subs	r3, #1
 800164c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800164e:	210f      	movs	r1, #15
 8001650:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001654:	f7ff ff8e 	bl	8001574 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001658:	4b05      	ldr	r3, [pc, #20]	@ (8001670 <SysTick_Config+0x40>)
 800165a:	2200      	movs	r2, #0
 800165c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800165e:	4b04      	ldr	r3, [pc, #16]	@ (8001670 <SysTick_Config+0x40>)
 8001660:	2207      	movs	r2, #7
 8001662:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001664:	2300      	movs	r3, #0
}
 8001666:	4618      	mov	r0, r3
 8001668:	3708      	adds	r7, #8
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	e000e010 	.word	0xe000e010

08001674 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800167c:	6878      	ldr	r0, [r7, #4]
 800167e:	f7ff ff29 	bl	80014d4 <__NVIC_SetPriorityGrouping>
}
 8001682:	bf00      	nop
 8001684:	3708      	adds	r7, #8
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}

0800168a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800168a:	b580      	push	{r7, lr}
 800168c:	b086      	sub	sp, #24
 800168e:	af00      	add	r7, sp, #0
 8001690:	4603      	mov	r3, r0
 8001692:	60b9      	str	r1, [r7, #8]
 8001694:	607a      	str	r2, [r7, #4]
 8001696:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001698:	2300      	movs	r3, #0
 800169a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800169c:	f7ff ff3e 	bl	800151c <__NVIC_GetPriorityGrouping>
 80016a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016a2:	687a      	ldr	r2, [r7, #4]
 80016a4:	68b9      	ldr	r1, [r7, #8]
 80016a6:	6978      	ldr	r0, [r7, #20]
 80016a8:	f7ff ff8e 	bl	80015c8 <NVIC_EncodePriority>
 80016ac:	4602      	mov	r2, r0
 80016ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016b2:	4611      	mov	r1, r2
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7ff ff5d 	bl	8001574 <__NVIC_SetPriority>
}
 80016ba:	bf00      	nop
 80016bc:	3718      	adds	r7, #24
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}

080016c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016c2:	b580      	push	{r7, lr}
 80016c4:	b082      	sub	sp, #8
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	4603      	mov	r3, r0
 80016ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff ff31 	bl	8001538 <__NVIC_EnableIRQ>
}
 80016d6:	bf00      	nop
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}

080016de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016de:	b580      	push	{r7, lr}
 80016e0:	b082      	sub	sp, #8
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f7ff ffa2 	bl	8001630 <SysTick_Config>
 80016ec:	4603      	mov	r3, r0
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}

080016f6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80016f6:	b580      	push	{r7, lr}
 80016f8:	b082      	sub	sp, #8
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d101      	bne.n	8001708 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	e014      	b.n	8001732 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	791b      	ldrb	r3, [r3, #4]
 800170c:	b2db      	uxtb	r3, r3
 800170e:	2b00      	cmp	r3, #0
 8001710:	d105      	bne.n	800171e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2200      	movs	r2, #0
 8001716:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	f7ff fa73 	bl	8000c04 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2202      	movs	r2, #2
 8001722:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2200      	movs	r2, #0
 8001728:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2201      	movs	r2, #1
 800172e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001730:	2300      	movs	r3, #0
}
 8001732:	4618      	mov	r0, r3
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}

0800173a <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800173a:	b480      	push	{r7}
 800173c:	b087      	sub	sp, #28
 800173e:	af00      	add	r7, sp, #0
 8001740:	60f8      	str	r0, [r7, #12]
 8001742:	60b9      	str	r1, [r7, #8]
 8001744:	607a      	str	r2, [r7, #4]
 8001746:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8001748:	2300      	movs	r3, #0
 800174a:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d101      	bne.n	8001756 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e015      	b.n	8001782 <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d105      	bne.n	800176e <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8001762:	697a      	ldr	r2, [r7, #20]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	4413      	add	r3, r2
 8001768:	3308      	adds	r3, #8
 800176a:	617b      	str	r3, [r7, #20]
 800176c:	e004      	b.n	8001778 <HAL_DAC_SetValue+0x3e>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800176e:	697a      	ldr	r2, [r7, #20]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	4413      	add	r3, r2
 8001774:	3314      	adds	r3, #20
 8001776:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	461a      	mov	r2, r3
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001780:	2300      	movs	r3, #0
}
 8001782:	4618      	mov	r0, r3
 8001784:	371c      	adds	r7, #28
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr

0800178e <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800178e:	b480      	push	{r7}
 8001790:	b089      	sub	sp, #36	@ 0x24
 8001792:	af00      	add	r7, sp, #0
 8001794:	60f8      	str	r0, [r7, #12]
 8001796:	60b9      	str	r1, [r7, #8]
 8001798:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800179a:	2300      	movs	r3, #0
 800179c:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d002      	beq.n	80017aa <HAL_DAC_ConfigChannel+0x1c>
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d101      	bne.n	80017ae <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e042      	b.n	8001834 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	795b      	ldrb	r3, [r3, #5]
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d101      	bne.n	80017ba <HAL_DAC_ConfigChannel+0x2c>
 80017b6:	2302      	movs	r3, #2
 80017b8:	e03c      	b.n	8001834 <HAL_DAC_ConfigChannel+0xa6>
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	2201      	movs	r2, #1
 80017be:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	2202      	movs	r2, #2
 80017c4:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	f003 0310 	and.w	r3, r3, #16
 80017d4:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80017d8:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 80017dc:	43db      	mvns	r3, r3
 80017de:	69ba      	ldr	r2, [r7, #24]
 80017e0:	4013      	ands	r3, r2
 80017e2:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	4313      	orrs	r3, r2
 80017ee:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	f003 0310 	and.w	r3, r3, #16
 80017f6:	697a      	ldr	r2, [r7, #20]
 80017f8:	fa02 f303 	lsl.w	r3, r2, r3
 80017fc:	69ba      	ldr	r2, [r7, #24]
 80017fe:	4313      	orrs	r3, r2
 8001800:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	69ba      	ldr	r2, [r7, #24]
 8001808:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	6819      	ldr	r1, [r3, #0]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	f003 0310 	and.w	r3, r3, #16
 8001816:	22c0      	movs	r2, #192	@ 0xc0
 8001818:	fa02 f303 	lsl.w	r3, r2, r3
 800181c:	43da      	mvns	r2, r3
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	400a      	ands	r2, r1
 8001824:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	2201      	movs	r2, #1
 800182a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	2200      	movs	r2, #0
 8001830:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8001832:	7ffb      	ldrb	r3, [r7, #31]
}
 8001834:	4618      	mov	r0, r3
 8001836:	3724      	adds	r7, #36	@ 0x24
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr

08001840 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b086      	sub	sp, #24
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001848:	2300      	movs	r3, #0
 800184a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800184c:	f7ff fbb0 	bl	8000fb0 <HAL_GetTick>
 8001850:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d101      	bne.n	800185c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	e099      	b.n	8001990 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2202      	movs	r2, #2
 8001860:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2200      	movs	r2, #0
 8001868:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f022 0201 	bic.w	r2, r2, #1
 800187a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800187c:	e00f      	b.n	800189e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800187e:	f7ff fb97 	bl	8000fb0 <HAL_GetTick>
 8001882:	4602      	mov	r2, r0
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	1ad3      	subs	r3, r2, r3
 8001888:	2b05      	cmp	r3, #5
 800188a:	d908      	bls.n	800189e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2220      	movs	r2, #32
 8001890:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2203      	movs	r2, #3
 8001896:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800189a:	2303      	movs	r3, #3
 800189c:	e078      	b.n	8001990 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 0301 	and.w	r3, r3, #1
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d1e8      	bne.n	800187e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80018b4:	697a      	ldr	r2, [r7, #20]
 80018b6:	4b38      	ldr	r3, [pc, #224]	@ (8001998 <HAL_DMA_Init+0x158>)
 80018b8:	4013      	ands	r3, r2
 80018ba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	685a      	ldr	r2, [r3, #4]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80018ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	691b      	ldr	r3, [r3, #16]
 80018d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	699b      	ldr	r3, [r3, #24]
 80018dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6a1b      	ldr	r3, [r3, #32]
 80018e8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80018ea:	697a      	ldr	r2, [r7, #20]
 80018ec:	4313      	orrs	r3, r2
 80018ee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018f4:	2b04      	cmp	r3, #4
 80018f6:	d107      	bne.n	8001908 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001900:	4313      	orrs	r3, r2
 8001902:	697a      	ldr	r2, [r7, #20]
 8001904:	4313      	orrs	r3, r2
 8001906:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	697a      	ldr	r2, [r7, #20]
 800190e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	695b      	ldr	r3, [r3, #20]
 8001916:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	f023 0307 	bic.w	r3, r3, #7
 800191e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001924:	697a      	ldr	r2, [r7, #20]
 8001926:	4313      	orrs	r3, r2
 8001928:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800192e:	2b04      	cmp	r3, #4
 8001930:	d117      	bne.n	8001962 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001936:	697a      	ldr	r2, [r7, #20]
 8001938:	4313      	orrs	r3, r2
 800193a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001940:	2b00      	cmp	r3, #0
 8001942:	d00e      	beq.n	8001962 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	f000 f9e9 	bl	8001d1c <DMA_CheckFifoParam>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d008      	beq.n	8001962 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2240      	movs	r2, #64	@ 0x40
 8001954:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2201      	movs	r2, #1
 800195a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800195e:	2301      	movs	r3, #1
 8001960:	e016      	b.n	8001990 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	697a      	ldr	r2, [r7, #20]
 8001968:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f000 f9a0 	bl	8001cb0 <DMA_CalcBaseAndBitshift>
 8001970:	4603      	mov	r3, r0
 8001972:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001978:	223f      	movs	r2, #63	@ 0x3f
 800197a:	409a      	lsls	r2, r3
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2200      	movs	r2, #0
 8001984:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2201      	movs	r2, #1
 800198a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800198e:	2300      	movs	r3, #0
}
 8001990:	4618      	mov	r0, r3
 8001992:	3718      	adds	r7, #24
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	f010803f 	.word	0xf010803f

0800199c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b086      	sub	sp, #24
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80019a4:	2300      	movs	r3, #0
 80019a6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80019a8:	4b8e      	ldr	r3, [pc, #568]	@ (8001be4 <HAL_DMA_IRQHandler+0x248>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a8e      	ldr	r2, [pc, #568]	@ (8001be8 <HAL_DMA_IRQHandler+0x24c>)
 80019ae:	fba2 2303 	umull	r2, r3, r2, r3
 80019b2:	0a9b      	lsrs	r3, r3, #10
 80019b4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019ba:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019c6:	2208      	movs	r2, #8
 80019c8:	409a      	lsls	r2, r3
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	4013      	ands	r3, r2
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d01a      	beq.n	8001a08 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 0304 	and.w	r3, r3, #4
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d013      	beq.n	8001a08 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f022 0204 	bic.w	r2, r2, #4
 80019ee:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019f4:	2208      	movs	r2, #8
 80019f6:	409a      	lsls	r2, r3
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a00:	f043 0201 	orr.w	r2, r3, #1
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	409a      	lsls	r2, r3
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	4013      	ands	r3, r2
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d012      	beq.n	8001a3e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	695b      	ldr	r3, [r3, #20]
 8001a1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d00b      	beq.n	8001a3e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	409a      	lsls	r2, r3
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a36:	f043 0202 	orr.w	r2, r3, #2
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a42:	2204      	movs	r2, #4
 8001a44:	409a      	lsls	r2, r3
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	4013      	ands	r3, r2
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d012      	beq.n	8001a74 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0302 	and.w	r3, r3, #2
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d00b      	beq.n	8001a74 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a60:	2204      	movs	r2, #4
 8001a62:	409a      	lsls	r2, r3
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a6c:	f043 0204 	orr.w	r2, r3, #4
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a78:	2210      	movs	r2, #16
 8001a7a:	409a      	lsls	r2, r3
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	4013      	ands	r3, r2
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d043      	beq.n	8001b0c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0308 	and.w	r3, r3, #8
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d03c      	beq.n	8001b0c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a96:	2210      	movs	r2, #16
 8001a98:	409a      	lsls	r2, r3
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d018      	beq.n	8001ade <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d108      	bne.n	8001acc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d024      	beq.n	8001b0c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	4798      	blx	r3
 8001aca:	e01f      	b.n	8001b0c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d01b      	beq.n	8001b0c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	4798      	blx	r3
 8001adc:	e016      	b.n	8001b0c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d107      	bne.n	8001afc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f022 0208 	bic.w	r2, r2, #8
 8001afa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d003      	beq.n	8001b0c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b10:	2220      	movs	r2, #32
 8001b12:	409a      	lsls	r2, r3
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	4013      	ands	r3, r2
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	f000 808f 	beq.w	8001c3c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 0310 	and.w	r3, r3, #16
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	f000 8087 	beq.w	8001c3c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b32:	2220      	movs	r2, #32
 8001b34:	409a      	lsls	r2, r3
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	2b05      	cmp	r3, #5
 8001b44:	d136      	bne.n	8001bb4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f022 0216 	bic.w	r2, r2, #22
 8001b54:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	695a      	ldr	r2, [r3, #20]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001b64:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d103      	bne.n	8001b76 <HAL_DMA_IRQHandler+0x1da>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d007      	beq.n	8001b86 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f022 0208 	bic.w	r2, r2, #8
 8001b84:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b8a:	223f      	movs	r2, #63	@ 0x3f
 8001b8c:	409a      	lsls	r2, r3
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2201      	movs	r2, #1
 8001b96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d07e      	beq.n	8001ca8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	4798      	blx	r3
        }
        return;
 8001bb2:	e079      	b.n	8001ca8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d01d      	beq.n	8001bfe <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d10d      	bne.n	8001bec <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d031      	beq.n	8001c3c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	4798      	blx	r3
 8001be0:	e02c      	b.n	8001c3c <HAL_DMA_IRQHandler+0x2a0>
 8001be2:	bf00      	nop
 8001be4:	20000000 	.word	0x20000000
 8001be8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d023      	beq.n	8001c3c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	4798      	blx	r3
 8001bfc:	e01e      	b.n	8001c3c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d10f      	bne.n	8001c2c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f022 0210 	bic.w	r2, r2, #16
 8001c1a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2201      	movs	r2, #1
 8001c20:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2200      	movs	r2, #0
 8001c28:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d003      	beq.n	8001c3c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d032      	beq.n	8001caa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c48:	f003 0301 	and.w	r3, r3, #1
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d022      	beq.n	8001c96 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2205      	movs	r2, #5
 8001c54:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f022 0201 	bic.w	r2, r2, #1
 8001c66:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	60bb      	str	r3, [r7, #8]
 8001c6e:	697a      	ldr	r2, [r7, #20]
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d307      	bcc.n	8001c84 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 0301 	and.w	r3, r3, #1
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d1f2      	bne.n	8001c68 <HAL_DMA_IRQHandler+0x2cc>
 8001c82:	e000      	b.n	8001c86 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001c84:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2201      	movs	r2, #1
 8001c8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2200      	movs	r2, #0
 8001c92:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d005      	beq.n	8001caa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	4798      	blx	r3
 8001ca6:	e000      	b.n	8001caa <HAL_DMA_IRQHandler+0x30e>
        return;
 8001ca8:	bf00      	nop
    }
  }
}
 8001caa:	3718      	adds	r7, #24
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}

08001cb0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b085      	sub	sp, #20
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	3b10      	subs	r3, #16
 8001cc0:	4a14      	ldr	r2, [pc, #80]	@ (8001d14 <DMA_CalcBaseAndBitshift+0x64>)
 8001cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8001cc6:	091b      	lsrs	r3, r3, #4
 8001cc8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001cca:	4a13      	ldr	r2, [pc, #76]	@ (8001d18 <DMA_CalcBaseAndBitshift+0x68>)
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	4413      	add	r3, r2
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	2b03      	cmp	r3, #3
 8001cdc:	d909      	bls.n	8001cf2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001ce6:	f023 0303 	bic.w	r3, r3, #3
 8001cea:	1d1a      	adds	r2, r3, #4
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	659a      	str	r2, [r3, #88]	@ 0x58
 8001cf0:	e007      	b.n	8001d02 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001cfa:	f023 0303 	bic.w	r3, r3, #3
 8001cfe:	687a      	ldr	r2, [r7, #4]
 8001d00:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3714      	adds	r7, #20
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	aaaaaaab 	.word	0xaaaaaaab
 8001d18:	08003210 	.word	0x08003210

08001d1c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b085      	sub	sp, #20
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d24:	2300      	movs	r3, #0
 8001d26:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d2c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	699b      	ldr	r3, [r3, #24]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d11f      	bne.n	8001d76 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	2b03      	cmp	r3, #3
 8001d3a:	d856      	bhi.n	8001dea <DMA_CheckFifoParam+0xce>
 8001d3c:	a201      	add	r2, pc, #4	@ (adr r2, 8001d44 <DMA_CheckFifoParam+0x28>)
 8001d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d42:	bf00      	nop
 8001d44:	08001d55 	.word	0x08001d55
 8001d48:	08001d67 	.word	0x08001d67
 8001d4c:	08001d55 	.word	0x08001d55
 8001d50:	08001deb 	.word	0x08001deb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d58:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d046      	beq.n	8001dee <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d64:	e043      	b.n	8001dee <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d6a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001d6e:	d140      	bne.n	8001df2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d74:	e03d      	b.n	8001df2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	699b      	ldr	r3, [r3, #24]
 8001d7a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001d7e:	d121      	bne.n	8001dc4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	2b03      	cmp	r3, #3
 8001d84:	d837      	bhi.n	8001df6 <DMA_CheckFifoParam+0xda>
 8001d86:	a201      	add	r2, pc, #4	@ (adr r2, 8001d8c <DMA_CheckFifoParam+0x70>)
 8001d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d8c:	08001d9d 	.word	0x08001d9d
 8001d90:	08001da3 	.word	0x08001da3
 8001d94:	08001d9d 	.word	0x08001d9d
 8001d98:	08001db5 	.word	0x08001db5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	73fb      	strb	r3, [r7, #15]
      break;
 8001da0:	e030      	b.n	8001e04 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001da6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d025      	beq.n	8001dfa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001db2:	e022      	b.n	8001dfa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001db8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001dbc:	d11f      	bne.n	8001dfe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001dc2:	e01c      	b.n	8001dfe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	2b02      	cmp	r3, #2
 8001dc8:	d903      	bls.n	8001dd2 <DMA_CheckFifoParam+0xb6>
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	2b03      	cmp	r3, #3
 8001dce:	d003      	beq.n	8001dd8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001dd0:	e018      	b.n	8001e04 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	73fb      	strb	r3, [r7, #15]
      break;
 8001dd6:	e015      	b.n	8001e04 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ddc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d00e      	beq.n	8001e02 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	73fb      	strb	r3, [r7, #15]
      break;
 8001de8:	e00b      	b.n	8001e02 <DMA_CheckFifoParam+0xe6>
      break;
 8001dea:	bf00      	nop
 8001dec:	e00a      	b.n	8001e04 <DMA_CheckFifoParam+0xe8>
      break;
 8001dee:	bf00      	nop
 8001df0:	e008      	b.n	8001e04 <DMA_CheckFifoParam+0xe8>
      break;
 8001df2:	bf00      	nop
 8001df4:	e006      	b.n	8001e04 <DMA_CheckFifoParam+0xe8>
      break;
 8001df6:	bf00      	nop
 8001df8:	e004      	b.n	8001e04 <DMA_CheckFifoParam+0xe8>
      break;
 8001dfa:	bf00      	nop
 8001dfc:	e002      	b.n	8001e04 <DMA_CheckFifoParam+0xe8>
      break;   
 8001dfe:	bf00      	nop
 8001e00:	e000      	b.n	8001e04 <DMA_CheckFifoParam+0xe8>
      break;
 8001e02:	bf00      	nop
    }
  } 
  
  return status; 
 8001e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3714      	adds	r7, #20
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop

08001e14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b089      	sub	sp, #36	@ 0x24
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e22:	2300      	movs	r3, #0
 8001e24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e26:	2300      	movs	r3, #0
 8001e28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	61fb      	str	r3, [r7, #28]
 8001e2e:	e16b      	b.n	8002108 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e30:	2201      	movs	r2, #1
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	fa02 f303 	lsl.w	r3, r2, r3
 8001e38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	697a      	ldr	r2, [r7, #20]
 8001e40:	4013      	ands	r3, r2
 8001e42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e44:	693a      	ldr	r2, [r7, #16]
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	f040 815a 	bne.w	8002102 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	f003 0303 	and.w	r3, r3, #3
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d005      	beq.n	8001e66 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e62:	2b02      	cmp	r3, #2
 8001e64:	d130      	bne.n	8001ec8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	005b      	lsls	r3, r3, #1
 8001e70:	2203      	movs	r2, #3
 8001e72:	fa02 f303 	lsl.w	r3, r2, r3
 8001e76:	43db      	mvns	r3, r3
 8001e78:	69ba      	ldr	r2, [r7, #24]
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	68da      	ldr	r2, [r3, #12]
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	005b      	lsls	r3, r3, #1
 8001e86:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8a:	69ba      	ldr	r2, [r7, #24]
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	69ba      	ldr	r2, [r7, #24]
 8001e94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea4:	43db      	mvns	r3, r3
 8001ea6:	69ba      	ldr	r2, [r7, #24]
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	091b      	lsrs	r3, r3, #4
 8001eb2:	f003 0201 	and.w	r2, r3, #1
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebc:	69ba      	ldr	r2, [r7, #24]
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f003 0303 	and.w	r3, r3, #3
 8001ed0:	2b03      	cmp	r3, #3
 8001ed2:	d017      	beq.n	8001f04 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	005b      	lsls	r3, r3, #1
 8001ede:	2203      	movs	r2, #3
 8001ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee4:	43db      	mvns	r3, r3
 8001ee6:	69ba      	ldr	r2, [r7, #24]
 8001ee8:	4013      	ands	r3, r2
 8001eea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	689a      	ldr	r2, [r3, #8]
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	005b      	lsls	r3, r3, #1
 8001ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef8:	69ba      	ldr	r2, [r7, #24]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	69ba      	ldr	r2, [r7, #24]
 8001f02:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f003 0303 	and.w	r3, r3, #3
 8001f0c:	2b02      	cmp	r3, #2
 8001f0e:	d123      	bne.n	8001f58 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	08da      	lsrs	r2, r3, #3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	3208      	adds	r2, #8
 8001f18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	f003 0307 	and.w	r3, r3, #7
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	220f      	movs	r2, #15
 8001f28:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2c:	43db      	mvns	r3, r3
 8001f2e:	69ba      	ldr	r2, [r7, #24]
 8001f30:	4013      	ands	r3, r2
 8001f32:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	691a      	ldr	r2, [r3, #16]
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	f003 0307 	and.w	r3, r3, #7
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	fa02 f303 	lsl.w	r3, r2, r3
 8001f44:	69ba      	ldr	r2, [r7, #24]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	08da      	lsrs	r2, r3, #3
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	3208      	adds	r2, #8
 8001f52:	69b9      	ldr	r1, [r7, #24]
 8001f54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	005b      	lsls	r3, r3, #1
 8001f62:	2203      	movs	r2, #3
 8001f64:	fa02 f303 	lsl.w	r3, r2, r3
 8001f68:	43db      	mvns	r3, r3
 8001f6a:	69ba      	ldr	r2, [r7, #24]
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f003 0203 	and.w	r2, r3, #3
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	005b      	lsls	r3, r3, #1
 8001f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f80:	69ba      	ldr	r2, [r7, #24]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	69ba      	ldr	r2, [r7, #24]
 8001f8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	f000 80b4 	beq.w	8002102 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	60fb      	str	r3, [r7, #12]
 8001f9e:	4b60      	ldr	r3, [pc, #384]	@ (8002120 <HAL_GPIO_Init+0x30c>)
 8001fa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fa2:	4a5f      	ldr	r2, [pc, #380]	@ (8002120 <HAL_GPIO_Init+0x30c>)
 8001fa4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fa8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001faa:	4b5d      	ldr	r3, [pc, #372]	@ (8002120 <HAL_GPIO_Init+0x30c>)
 8001fac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fb2:	60fb      	str	r3, [r7, #12]
 8001fb4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fb6:	4a5b      	ldr	r2, [pc, #364]	@ (8002124 <HAL_GPIO_Init+0x310>)
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	089b      	lsrs	r3, r3, #2
 8001fbc:	3302      	adds	r3, #2
 8001fbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	f003 0303 	and.w	r3, r3, #3
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	220f      	movs	r2, #15
 8001fce:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd2:	43db      	mvns	r3, r3
 8001fd4:	69ba      	ldr	r2, [r7, #24]
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4a52      	ldr	r2, [pc, #328]	@ (8002128 <HAL_GPIO_Init+0x314>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d02b      	beq.n	800203a <HAL_GPIO_Init+0x226>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4a51      	ldr	r2, [pc, #324]	@ (800212c <HAL_GPIO_Init+0x318>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d025      	beq.n	8002036 <HAL_GPIO_Init+0x222>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4a50      	ldr	r2, [pc, #320]	@ (8002130 <HAL_GPIO_Init+0x31c>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d01f      	beq.n	8002032 <HAL_GPIO_Init+0x21e>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4a4f      	ldr	r2, [pc, #316]	@ (8002134 <HAL_GPIO_Init+0x320>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d019      	beq.n	800202e <HAL_GPIO_Init+0x21a>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4a4e      	ldr	r2, [pc, #312]	@ (8002138 <HAL_GPIO_Init+0x324>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d013      	beq.n	800202a <HAL_GPIO_Init+0x216>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a4d      	ldr	r2, [pc, #308]	@ (800213c <HAL_GPIO_Init+0x328>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d00d      	beq.n	8002026 <HAL_GPIO_Init+0x212>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a4c      	ldr	r2, [pc, #304]	@ (8002140 <HAL_GPIO_Init+0x32c>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d007      	beq.n	8002022 <HAL_GPIO_Init+0x20e>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a4b      	ldr	r2, [pc, #300]	@ (8002144 <HAL_GPIO_Init+0x330>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d101      	bne.n	800201e <HAL_GPIO_Init+0x20a>
 800201a:	2307      	movs	r3, #7
 800201c:	e00e      	b.n	800203c <HAL_GPIO_Init+0x228>
 800201e:	2308      	movs	r3, #8
 8002020:	e00c      	b.n	800203c <HAL_GPIO_Init+0x228>
 8002022:	2306      	movs	r3, #6
 8002024:	e00a      	b.n	800203c <HAL_GPIO_Init+0x228>
 8002026:	2305      	movs	r3, #5
 8002028:	e008      	b.n	800203c <HAL_GPIO_Init+0x228>
 800202a:	2304      	movs	r3, #4
 800202c:	e006      	b.n	800203c <HAL_GPIO_Init+0x228>
 800202e:	2303      	movs	r3, #3
 8002030:	e004      	b.n	800203c <HAL_GPIO_Init+0x228>
 8002032:	2302      	movs	r3, #2
 8002034:	e002      	b.n	800203c <HAL_GPIO_Init+0x228>
 8002036:	2301      	movs	r3, #1
 8002038:	e000      	b.n	800203c <HAL_GPIO_Init+0x228>
 800203a:	2300      	movs	r3, #0
 800203c:	69fa      	ldr	r2, [r7, #28]
 800203e:	f002 0203 	and.w	r2, r2, #3
 8002042:	0092      	lsls	r2, r2, #2
 8002044:	4093      	lsls	r3, r2
 8002046:	69ba      	ldr	r2, [r7, #24]
 8002048:	4313      	orrs	r3, r2
 800204a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800204c:	4935      	ldr	r1, [pc, #212]	@ (8002124 <HAL_GPIO_Init+0x310>)
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	089b      	lsrs	r3, r3, #2
 8002052:	3302      	adds	r3, #2
 8002054:	69ba      	ldr	r2, [r7, #24]
 8002056:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800205a:	4b3b      	ldr	r3, [pc, #236]	@ (8002148 <HAL_GPIO_Init+0x334>)
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	43db      	mvns	r3, r3
 8002064:	69ba      	ldr	r2, [r7, #24]
 8002066:	4013      	ands	r3, r2
 8002068:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d003      	beq.n	800207e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002076:	69ba      	ldr	r2, [r7, #24]
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	4313      	orrs	r3, r2
 800207c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800207e:	4a32      	ldr	r2, [pc, #200]	@ (8002148 <HAL_GPIO_Init+0x334>)
 8002080:	69bb      	ldr	r3, [r7, #24]
 8002082:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002084:	4b30      	ldr	r3, [pc, #192]	@ (8002148 <HAL_GPIO_Init+0x334>)
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	43db      	mvns	r3, r3
 800208e:	69ba      	ldr	r2, [r7, #24]
 8002090:	4013      	ands	r3, r2
 8002092:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800209c:	2b00      	cmp	r3, #0
 800209e:	d003      	beq.n	80020a8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80020a0:	69ba      	ldr	r2, [r7, #24]
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020a8:	4a27      	ldr	r2, [pc, #156]	@ (8002148 <HAL_GPIO_Init+0x334>)
 80020aa:	69bb      	ldr	r3, [r7, #24]
 80020ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80020ae:	4b26      	ldr	r3, [pc, #152]	@ (8002148 <HAL_GPIO_Init+0x334>)
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	43db      	mvns	r3, r3
 80020b8:	69ba      	ldr	r2, [r7, #24]
 80020ba:	4013      	ands	r3, r2
 80020bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d003      	beq.n	80020d2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80020ca:	69ba      	ldr	r2, [r7, #24]
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020d2:	4a1d      	ldr	r2, [pc, #116]	@ (8002148 <HAL_GPIO_Init+0x334>)
 80020d4:	69bb      	ldr	r3, [r7, #24]
 80020d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020d8:	4b1b      	ldr	r3, [pc, #108]	@ (8002148 <HAL_GPIO_Init+0x334>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	43db      	mvns	r3, r3
 80020e2:	69ba      	ldr	r2, [r7, #24]
 80020e4:	4013      	ands	r3, r2
 80020e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d003      	beq.n	80020fc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80020f4:	69ba      	ldr	r2, [r7, #24]
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020fc:	4a12      	ldr	r2, [pc, #72]	@ (8002148 <HAL_GPIO_Init+0x334>)
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	3301      	adds	r3, #1
 8002106:	61fb      	str	r3, [r7, #28]
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	2b0f      	cmp	r3, #15
 800210c:	f67f ae90 	bls.w	8001e30 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002110:	bf00      	nop
 8002112:	bf00      	nop
 8002114:	3724      	adds	r7, #36	@ 0x24
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	40023800 	.word	0x40023800
 8002124:	40013800 	.word	0x40013800
 8002128:	40020000 	.word	0x40020000
 800212c:	40020400 	.word	0x40020400
 8002130:	40020800 	.word	0x40020800
 8002134:	40020c00 	.word	0x40020c00
 8002138:	40021000 	.word	0x40021000
 800213c:	40021400 	.word	0x40021400
 8002140:	40021800 	.word	0x40021800
 8002144:	40021c00 	.word	0x40021c00
 8002148:	40013c00 	.word	0x40013c00

0800214c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	460b      	mov	r3, r1
 8002156:	807b      	strh	r3, [r7, #2]
 8002158:	4613      	mov	r3, r2
 800215a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800215c:	787b      	ldrb	r3, [r7, #1]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d003      	beq.n	800216a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002162:	887a      	ldrh	r2, [r7, #2]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002168:	e003      	b.n	8002172 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800216a:	887b      	ldrh	r3, [r7, #2]
 800216c:	041a      	lsls	r2, r3, #16
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	619a      	str	r2, [r3, #24]
}
 8002172:	bf00      	nop
 8002174:	370c      	adds	r7, #12
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
	...

08002180 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b086      	sub	sp, #24
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d101      	bne.n	8002192 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e267      	b.n	8002662 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 0301 	and.w	r3, r3, #1
 800219a:	2b00      	cmp	r3, #0
 800219c:	d075      	beq.n	800228a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800219e:	4b88      	ldr	r3, [pc, #544]	@ (80023c0 <HAL_RCC_OscConfig+0x240>)
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	f003 030c 	and.w	r3, r3, #12
 80021a6:	2b04      	cmp	r3, #4
 80021a8:	d00c      	beq.n	80021c4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021aa:	4b85      	ldr	r3, [pc, #532]	@ (80023c0 <HAL_RCC_OscConfig+0x240>)
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80021b2:	2b08      	cmp	r3, #8
 80021b4:	d112      	bne.n	80021dc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021b6:	4b82      	ldr	r3, [pc, #520]	@ (80023c0 <HAL_RCC_OscConfig+0x240>)
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021be:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80021c2:	d10b      	bne.n	80021dc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021c4:	4b7e      	ldr	r3, [pc, #504]	@ (80023c0 <HAL_RCC_OscConfig+0x240>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d05b      	beq.n	8002288 <HAL_RCC_OscConfig+0x108>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d157      	bne.n	8002288 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	e242      	b.n	8002662 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021e4:	d106      	bne.n	80021f4 <HAL_RCC_OscConfig+0x74>
 80021e6:	4b76      	ldr	r3, [pc, #472]	@ (80023c0 <HAL_RCC_OscConfig+0x240>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a75      	ldr	r2, [pc, #468]	@ (80023c0 <HAL_RCC_OscConfig+0x240>)
 80021ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021f0:	6013      	str	r3, [r2, #0]
 80021f2:	e01d      	b.n	8002230 <HAL_RCC_OscConfig+0xb0>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80021fc:	d10c      	bne.n	8002218 <HAL_RCC_OscConfig+0x98>
 80021fe:	4b70      	ldr	r3, [pc, #448]	@ (80023c0 <HAL_RCC_OscConfig+0x240>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a6f      	ldr	r2, [pc, #444]	@ (80023c0 <HAL_RCC_OscConfig+0x240>)
 8002204:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002208:	6013      	str	r3, [r2, #0]
 800220a:	4b6d      	ldr	r3, [pc, #436]	@ (80023c0 <HAL_RCC_OscConfig+0x240>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a6c      	ldr	r2, [pc, #432]	@ (80023c0 <HAL_RCC_OscConfig+0x240>)
 8002210:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002214:	6013      	str	r3, [r2, #0]
 8002216:	e00b      	b.n	8002230 <HAL_RCC_OscConfig+0xb0>
 8002218:	4b69      	ldr	r3, [pc, #420]	@ (80023c0 <HAL_RCC_OscConfig+0x240>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a68      	ldr	r2, [pc, #416]	@ (80023c0 <HAL_RCC_OscConfig+0x240>)
 800221e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002222:	6013      	str	r3, [r2, #0]
 8002224:	4b66      	ldr	r3, [pc, #408]	@ (80023c0 <HAL_RCC_OscConfig+0x240>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a65      	ldr	r2, [pc, #404]	@ (80023c0 <HAL_RCC_OscConfig+0x240>)
 800222a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800222e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d013      	beq.n	8002260 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002238:	f7fe feba 	bl	8000fb0 <HAL_GetTick>
 800223c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800223e:	e008      	b.n	8002252 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002240:	f7fe feb6 	bl	8000fb0 <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	2b64      	cmp	r3, #100	@ 0x64
 800224c:	d901      	bls.n	8002252 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e207      	b.n	8002662 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002252:	4b5b      	ldr	r3, [pc, #364]	@ (80023c0 <HAL_RCC_OscConfig+0x240>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d0f0      	beq.n	8002240 <HAL_RCC_OscConfig+0xc0>
 800225e:	e014      	b.n	800228a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002260:	f7fe fea6 	bl	8000fb0 <HAL_GetTick>
 8002264:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002266:	e008      	b.n	800227a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002268:	f7fe fea2 	bl	8000fb0 <HAL_GetTick>
 800226c:	4602      	mov	r2, r0
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	2b64      	cmp	r3, #100	@ 0x64
 8002274:	d901      	bls.n	800227a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002276:	2303      	movs	r3, #3
 8002278:	e1f3      	b.n	8002662 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800227a:	4b51      	ldr	r3, [pc, #324]	@ (80023c0 <HAL_RCC_OscConfig+0x240>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d1f0      	bne.n	8002268 <HAL_RCC_OscConfig+0xe8>
 8002286:	e000      	b.n	800228a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002288:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0302 	and.w	r3, r3, #2
 8002292:	2b00      	cmp	r3, #0
 8002294:	d063      	beq.n	800235e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002296:	4b4a      	ldr	r3, [pc, #296]	@ (80023c0 <HAL_RCC_OscConfig+0x240>)
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	f003 030c 	and.w	r3, r3, #12
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d00b      	beq.n	80022ba <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022a2:	4b47      	ldr	r3, [pc, #284]	@ (80023c0 <HAL_RCC_OscConfig+0x240>)
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80022aa:	2b08      	cmp	r3, #8
 80022ac:	d11c      	bne.n	80022e8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022ae:	4b44      	ldr	r3, [pc, #272]	@ (80023c0 <HAL_RCC_OscConfig+0x240>)
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d116      	bne.n	80022e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022ba:	4b41      	ldr	r3, [pc, #260]	@ (80023c0 <HAL_RCC_OscConfig+0x240>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0302 	and.w	r3, r3, #2
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d005      	beq.n	80022d2 <HAL_RCC_OscConfig+0x152>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	68db      	ldr	r3, [r3, #12]
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d001      	beq.n	80022d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e1c7      	b.n	8002662 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022d2:	4b3b      	ldr	r3, [pc, #236]	@ (80023c0 <HAL_RCC_OscConfig+0x240>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	691b      	ldr	r3, [r3, #16]
 80022de:	00db      	lsls	r3, r3, #3
 80022e0:	4937      	ldr	r1, [pc, #220]	@ (80023c0 <HAL_RCC_OscConfig+0x240>)
 80022e2:	4313      	orrs	r3, r2
 80022e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022e6:	e03a      	b.n	800235e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d020      	beq.n	8002332 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022f0:	4b34      	ldr	r3, [pc, #208]	@ (80023c4 <HAL_RCC_OscConfig+0x244>)
 80022f2:	2201      	movs	r2, #1
 80022f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022f6:	f7fe fe5b 	bl	8000fb0 <HAL_GetTick>
 80022fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022fc:	e008      	b.n	8002310 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022fe:	f7fe fe57 	bl	8000fb0 <HAL_GetTick>
 8002302:	4602      	mov	r2, r0
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	1ad3      	subs	r3, r2, r3
 8002308:	2b02      	cmp	r3, #2
 800230a:	d901      	bls.n	8002310 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800230c:	2303      	movs	r3, #3
 800230e:	e1a8      	b.n	8002662 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002310:	4b2b      	ldr	r3, [pc, #172]	@ (80023c0 <HAL_RCC_OscConfig+0x240>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0302 	and.w	r3, r3, #2
 8002318:	2b00      	cmp	r3, #0
 800231a:	d0f0      	beq.n	80022fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800231c:	4b28      	ldr	r3, [pc, #160]	@ (80023c0 <HAL_RCC_OscConfig+0x240>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	691b      	ldr	r3, [r3, #16]
 8002328:	00db      	lsls	r3, r3, #3
 800232a:	4925      	ldr	r1, [pc, #148]	@ (80023c0 <HAL_RCC_OscConfig+0x240>)
 800232c:	4313      	orrs	r3, r2
 800232e:	600b      	str	r3, [r1, #0]
 8002330:	e015      	b.n	800235e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002332:	4b24      	ldr	r3, [pc, #144]	@ (80023c4 <HAL_RCC_OscConfig+0x244>)
 8002334:	2200      	movs	r2, #0
 8002336:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002338:	f7fe fe3a 	bl	8000fb0 <HAL_GetTick>
 800233c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800233e:	e008      	b.n	8002352 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002340:	f7fe fe36 	bl	8000fb0 <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	2b02      	cmp	r3, #2
 800234c:	d901      	bls.n	8002352 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	e187      	b.n	8002662 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002352:	4b1b      	ldr	r3, [pc, #108]	@ (80023c0 <HAL_RCC_OscConfig+0x240>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0302 	and.w	r3, r3, #2
 800235a:	2b00      	cmp	r3, #0
 800235c:	d1f0      	bne.n	8002340 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0308 	and.w	r3, r3, #8
 8002366:	2b00      	cmp	r3, #0
 8002368:	d036      	beq.n	80023d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	695b      	ldr	r3, [r3, #20]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d016      	beq.n	80023a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002372:	4b15      	ldr	r3, [pc, #84]	@ (80023c8 <HAL_RCC_OscConfig+0x248>)
 8002374:	2201      	movs	r2, #1
 8002376:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002378:	f7fe fe1a 	bl	8000fb0 <HAL_GetTick>
 800237c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800237e:	e008      	b.n	8002392 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002380:	f7fe fe16 	bl	8000fb0 <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	2b02      	cmp	r3, #2
 800238c:	d901      	bls.n	8002392 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e167      	b.n	8002662 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002392:	4b0b      	ldr	r3, [pc, #44]	@ (80023c0 <HAL_RCC_OscConfig+0x240>)
 8002394:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002396:	f003 0302 	and.w	r3, r3, #2
 800239a:	2b00      	cmp	r3, #0
 800239c:	d0f0      	beq.n	8002380 <HAL_RCC_OscConfig+0x200>
 800239e:	e01b      	b.n	80023d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023a0:	4b09      	ldr	r3, [pc, #36]	@ (80023c8 <HAL_RCC_OscConfig+0x248>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023a6:	f7fe fe03 	bl	8000fb0 <HAL_GetTick>
 80023aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023ac:	e00e      	b.n	80023cc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023ae:	f7fe fdff 	bl	8000fb0 <HAL_GetTick>
 80023b2:	4602      	mov	r2, r0
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	2b02      	cmp	r3, #2
 80023ba:	d907      	bls.n	80023cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80023bc:	2303      	movs	r3, #3
 80023be:	e150      	b.n	8002662 <HAL_RCC_OscConfig+0x4e2>
 80023c0:	40023800 	.word	0x40023800
 80023c4:	42470000 	.word	0x42470000
 80023c8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023cc:	4b88      	ldr	r3, [pc, #544]	@ (80025f0 <HAL_RCC_OscConfig+0x470>)
 80023ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023d0:	f003 0302 	and.w	r3, r3, #2
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d1ea      	bne.n	80023ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0304 	and.w	r3, r3, #4
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	f000 8097 	beq.w	8002514 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023e6:	2300      	movs	r3, #0
 80023e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023ea:	4b81      	ldr	r3, [pc, #516]	@ (80025f0 <HAL_RCC_OscConfig+0x470>)
 80023ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d10f      	bne.n	8002416 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023f6:	2300      	movs	r3, #0
 80023f8:	60bb      	str	r3, [r7, #8]
 80023fa:	4b7d      	ldr	r3, [pc, #500]	@ (80025f0 <HAL_RCC_OscConfig+0x470>)
 80023fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023fe:	4a7c      	ldr	r2, [pc, #496]	@ (80025f0 <HAL_RCC_OscConfig+0x470>)
 8002400:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002404:	6413      	str	r3, [r2, #64]	@ 0x40
 8002406:	4b7a      	ldr	r3, [pc, #488]	@ (80025f0 <HAL_RCC_OscConfig+0x470>)
 8002408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800240a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800240e:	60bb      	str	r3, [r7, #8]
 8002410:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002412:	2301      	movs	r3, #1
 8002414:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002416:	4b77      	ldr	r3, [pc, #476]	@ (80025f4 <HAL_RCC_OscConfig+0x474>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800241e:	2b00      	cmp	r3, #0
 8002420:	d118      	bne.n	8002454 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002422:	4b74      	ldr	r3, [pc, #464]	@ (80025f4 <HAL_RCC_OscConfig+0x474>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a73      	ldr	r2, [pc, #460]	@ (80025f4 <HAL_RCC_OscConfig+0x474>)
 8002428:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800242c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800242e:	f7fe fdbf 	bl	8000fb0 <HAL_GetTick>
 8002432:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002434:	e008      	b.n	8002448 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002436:	f7fe fdbb 	bl	8000fb0 <HAL_GetTick>
 800243a:	4602      	mov	r2, r0
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	2b02      	cmp	r3, #2
 8002442:	d901      	bls.n	8002448 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002444:	2303      	movs	r3, #3
 8002446:	e10c      	b.n	8002662 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002448:	4b6a      	ldr	r3, [pc, #424]	@ (80025f4 <HAL_RCC_OscConfig+0x474>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002450:	2b00      	cmp	r3, #0
 8002452:	d0f0      	beq.n	8002436 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	2b01      	cmp	r3, #1
 800245a:	d106      	bne.n	800246a <HAL_RCC_OscConfig+0x2ea>
 800245c:	4b64      	ldr	r3, [pc, #400]	@ (80025f0 <HAL_RCC_OscConfig+0x470>)
 800245e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002460:	4a63      	ldr	r2, [pc, #396]	@ (80025f0 <HAL_RCC_OscConfig+0x470>)
 8002462:	f043 0301 	orr.w	r3, r3, #1
 8002466:	6713      	str	r3, [r2, #112]	@ 0x70
 8002468:	e01c      	b.n	80024a4 <HAL_RCC_OscConfig+0x324>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	2b05      	cmp	r3, #5
 8002470:	d10c      	bne.n	800248c <HAL_RCC_OscConfig+0x30c>
 8002472:	4b5f      	ldr	r3, [pc, #380]	@ (80025f0 <HAL_RCC_OscConfig+0x470>)
 8002474:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002476:	4a5e      	ldr	r2, [pc, #376]	@ (80025f0 <HAL_RCC_OscConfig+0x470>)
 8002478:	f043 0304 	orr.w	r3, r3, #4
 800247c:	6713      	str	r3, [r2, #112]	@ 0x70
 800247e:	4b5c      	ldr	r3, [pc, #368]	@ (80025f0 <HAL_RCC_OscConfig+0x470>)
 8002480:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002482:	4a5b      	ldr	r2, [pc, #364]	@ (80025f0 <HAL_RCC_OscConfig+0x470>)
 8002484:	f043 0301 	orr.w	r3, r3, #1
 8002488:	6713      	str	r3, [r2, #112]	@ 0x70
 800248a:	e00b      	b.n	80024a4 <HAL_RCC_OscConfig+0x324>
 800248c:	4b58      	ldr	r3, [pc, #352]	@ (80025f0 <HAL_RCC_OscConfig+0x470>)
 800248e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002490:	4a57      	ldr	r2, [pc, #348]	@ (80025f0 <HAL_RCC_OscConfig+0x470>)
 8002492:	f023 0301 	bic.w	r3, r3, #1
 8002496:	6713      	str	r3, [r2, #112]	@ 0x70
 8002498:	4b55      	ldr	r3, [pc, #340]	@ (80025f0 <HAL_RCC_OscConfig+0x470>)
 800249a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800249c:	4a54      	ldr	r2, [pc, #336]	@ (80025f0 <HAL_RCC_OscConfig+0x470>)
 800249e:	f023 0304 	bic.w	r3, r3, #4
 80024a2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d015      	beq.n	80024d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024ac:	f7fe fd80 	bl	8000fb0 <HAL_GetTick>
 80024b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024b2:	e00a      	b.n	80024ca <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024b4:	f7fe fd7c 	bl	8000fb0 <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d901      	bls.n	80024ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e0cb      	b.n	8002662 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024ca:	4b49      	ldr	r3, [pc, #292]	@ (80025f0 <HAL_RCC_OscConfig+0x470>)
 80024cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024ce:	f003 0302 	and.w	r3, r3, #2
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d0ee      	beq.n	80024b4 <HAL_RCC_OscConfig+0x334>
 80024d6:	e014      	b.n	8002502 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024d8:	f7fe fd6a 	bl	8000fb0 <HAL_GetTick>
 80024dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024de:	e00a      	b.n	80024f6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024e0:	f7fe fd66 	bl	8000fb0 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d901      	bls.n	80024f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e0b5      	b.n	8002662 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024f6:	4b3e      	ldr	r3, [pc, #248]	@ (80025f0 <HAL_RCC_OscConfig+0x470>)
 80024f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024fa:	f003 0302 	and.w	r3, r3, #2
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d1ee      	bne.n	80024e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002502:	7dfb      	ldrb	r3, [r7, #23]
 8002504:	2b01      	cmp	r3, #1
 8002506:	d105      	bne.n	8002514 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002508:	4b39      	ldr	r3, [pc, #228]	@ (80025f0 <HAL_RCC_OscConfig+0x470>)
 800250a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800250c:	4a38      	ldr	r2, [pc, #224]	@ (80025f0 <HAL_RCC_OscConfig+0x470>)
 800250e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002512:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	699b      	ldr	r3, [r3, #24]
 8002518:	2b00      	cmp	r3, #0
 800251a:	f000 80a1 	beq.w	8002660 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800251e:	4b34      	ldr	r3, [pc, #208]	@ (80025f0 <HAL_RCC_OscConfig+0x470>)
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	f003 030c 	and.w	r3, r3, #12
 8002526:	2b08      	cmp	r3, #8
 8002528:	d05c      	beq.n	80025e4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	699b      	ldr	r3, [r3, #24]
 800252e:	2b02      	cmp	r3, #2
 8002530:	d141      	bne.n	80025b6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002532:	4b31      	ldr	r3, [pc, #196]	@ (80025f8 <HAL_RCC_OscConfig+0x478>)
 8002534:	2200      	movs	r2, #0
 8002536:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002538:	f7fe fd3a 	bl	8000fb0 <HAL_GetTick>
 800253c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800253e:	e008      	b.n	8002552 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002540:	f7fe fd36 	bl	8000fb0 <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	2b02      	cmp	r3, #2
 800254c:	d901      	bls.n	8002552 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e087      	b.n	8002662 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002552:	4b27      	ldr	r3, [pc, #156]	@ (80025f0 <HAL_RCC_OscConfig+0x470>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d1f0      	bne.n	8002540 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	69da      	ldr	r2, [r3, #28]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6a1b      	ldr	r3, [r3, #32]
 8002566:	431a      	orrs	r2, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800256c:	019b      	lsls	r3, r3, #6
 800256e:	431a      	orrs	r2, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002574:	085b      	lsrs	r3, r3, #1
 8002576:	3b01      	subs	r3, #1
 8002578:	041b      	lsls	r3, r3, #16
 800257a:	431a      	orrs	r2, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002580:	061b      	lsls	r3, r3, #24
 8002582:	491b      	ldr	r1, [pc, #108]	@ (80025f0 <HAL_RCC_OscConfig+0x470>)
 8002584:	4313      	orrs	r3, r2
 8002586:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002588:	4b1b      	ldr	r3, [pc, #108]	@ (80025f8 <HAL_RCC_OscConfig+0x478>)
 800258a:	2201      	movs	r2, #1
 800258c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800258e:	f7fe fd0f 	bl	8000fb0 <HAL_GetTick>
 8002592:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002594:	e008      	b.n	80025a8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002596:	f7fe fd0b 	bl	8000fb0 <HAL_GetTick>
 800259a:	4602      	mov	r2, r0
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d901      	bls.n	80025a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80025a4:	2303      	movs	r3, #3
 80025a6:	e05c      	b.n	8002662 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025a8:	4b11      	ldr	r3, [pc, #68]	@ (80025f0 <HAL_RCC_OscConfig+0x470>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d0f0      	beq.n	8002596 <HAL_RCC_OscConfig+0x416>
 80025b4:	e054      	b.n	8002660 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025b6:	4b10      	ldr	r3, [pc, #64]	@ (80025f8 <HAL_RCC_OscConfig+0x478>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025bc:	f7fe fcf8 	bl	8000fb0 <HAL_GetTick>
 80025c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025c2:	e008      	b.n	80025d6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025c4:	f7fe fcf4 	bl	8000fb0 <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	d901      	bls.n	80025d6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	e045      	b.n	8002662 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025d6:	4b06      	ldr	r3, [pc, #24]	@ (80025f0 <HAL_RCC_OscConfig+0x470>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d1f0      	bne.n	80025c4 <HAL_RCC_OscConfig+0x444>
 80025e2:	e03d      	b.n	8002660 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	699b      	ldr	r3, [r3, #24]
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d107      	bne.n	80025fc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e038      	b.n	8002662 <HAL_RCC_OscConfig+0x4e2>
 80025f0:	40023800 	.word	0x40023800
 80025f4:	40007000 	.word	0x40007000
 80025f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80025fc:	4b1b      	ldr	r3, [pc, #108]	@ (800266c <HAL_RCC_OscConfig+0x4ec>)
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	699b      	ldr	r3, [r3, #24]
 8002606:	2b01      	cmp	r3, #1
 8002608:	d028      	beq.n	800265c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002614:	429a      	cmp	r2, r3
 8002616:	d121      	bne.n	800265c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002622:	429a      	cmp	r2, r3
 8002624:	d11a      	bne.n	800265c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002626:	68fa      	ldr	r2, [r7, #12]
 8002628:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800262c:	4013      	ands	r3, r2
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002632:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002634:	4293      	cmp	r3, r2
 8002636:	d111      	bne.n	800265c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002642:	085b      	lsrs	r3, r3, #1
 8002644:	3b01      	subs	r3, #1
 8002646:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002648:	429a      	cmp	r2, r3
 800264a:	d107      	bne.n	800265c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002656:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002658:	429a      	cmp	r2, r3
 800265a:	d001      	beq.n	8002660 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e000      	b.n	8002662 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002660:	2300      	movs	r3, #0
}
 8002662:	4618      	mov	r0, r3
 8002664:	3718      	adds	r7, #24
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	40023800 	.word	0x40023800

08002670 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b084      	sub	sp, #16
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
 8002678:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d101      	bne.n	8002684 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e0cc      	b.n	800281e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002684:	4b68      	ldr	r3, [pc, #416]	@ (8002828 <HAL_RCC_ClockConfig+0x1b8>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0307 	and.w	r3, r3, #7
 800268c:	683a      	ldr	r2, [r7, #0]
 800268e:	429a      	cmp	r2, r3
 8002690:	d90c      	bls.n	80026ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002692:	4b65      	ldr	r3, [pc, #404]	@ (8002828 <HAL_RCC_ClockConfig+0x1b8>)
 8002694:	683a      	ldr	r2, [r7, #0]
 8002696:	b2d2      	uxtb	r2, r2
 8002698:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800269a:	4b63      	ldr	r3, [pc, #396]	@ (8002828 <HAL_RCC_ClockConfig+0x1b8>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0307 	and.w	r3, r3, #7
 80026a2:	683a      	ldr	r2, [r7, #0]
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d001      	beq.n	80026ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e0b8      	b.n	800281e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0302 	and.w	r3, r3, #2
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d020      	beq.n	80026fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 0304 	and.w	r3, r3, #4
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d005      	beq.n	80026d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026c4:	4b59      	ldr	r3, [pc, #356]	@ (800282c <HAL_RCC_ClockConfig+0x1bc>)
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	4a58      	ldr	r2, [pc, #352]	@ (800282c <HAL_RCC_ClockConfig+0x1bc>)
 80026ca:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80026ce:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0308 	and.w	r3, r3, #8
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d005      	beq.n	80026e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026dc:	4b53      	ldr	r3, [pc, #332]	@ (800282c <HAL_RCC_ClockConfig+0x1bc>)
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	4a52      	ldr	r2, [pc, #328]	@ (800282c <HAL_RCC_ClockConfig+0x1bc>)
 80026e2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80026e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026e8:	4b50      	ldr	r3, [pc, #320]	@ (800282c <HAL_RCC_ClockConfig+0x1bc>)
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	494d      	ldr	r1, [pc, #308]	@ (800282c <HAL_RCC_ClockConfig+0x1bc>)
 80026f6:	4313      	orrs	r3, r2
 80026f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 0301 	and.w	r3, r3, #1
 8002702:	2b00      	cmp	r3, #0
 8002704:	d044      	beq.n	8002790 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	2b01      	cmp	r3, #1
 800270c:	d107      	bne.n	800271e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800270e:	4b47      	ldr	r3, [pc, #284]	@ (800282c <HAL_RCC_ClockConfig+0x1bc>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d119      	bne.n	800274e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e07f      	b.n	800281e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	2b02      	cmp	r3, #2
 8002724:	d003      	beq.n	800272e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800272a:	2b03      	cmp	r3, #3
 800272c:	d107      	bne.n	800273e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800272e:	4b3f      	ldr	r3, [pc, #252]	@ (800282c <HAL_RCC_ClockConfig+0x1bc>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d109      	bne.n	800274e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e06f      	b.n	800281e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800273e:	4b3b      	ldr	r3, [pc, #236]	@ (800282c <HAL_RCC_ClockConfig+0x1bc>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0302 	and.w	r3, r3, #2
 8002746:	2b00      	cmp	r3, #0
 8002748:	d101      	bne.n	800274e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e067      	b.n	800281e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800274e:	4b37      	ldr	r3, [pc, #220]	@ (800282c <HAL_RCC_ClockConfig+0x1bc>)
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	f023 0203 	bic.w	r2, r3, #3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	4934      	ldr	r1, [pc, #208]	@ (800282c <HAL_RCC_ClockConfig+0x1bc>)
 800275c:	4313      	orrs	r3, r2
 800275e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002760:	f7fe fc26 	bl	8000fb0 <HAL_GetTick>
 8002764:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002766:	e00a      	b.n	800277e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002768:	f7fe fc22 	bl	8000fb0 <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002776:	4293      	cmp	r3, r2
 8002778:	d901      	bls.n	800277e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	e04f      	b.n	800281e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800277e:	4b2b      	ldr	r3, [pc, #172]	@ (800282c <HAL_RCC_ClockConfig+0x1bc>)
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	f003 020c 	and.w	r2, r3, #12
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	429a      	cmp	r2, r3
 800278e:	d1eb      	bne.n	8002768 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002790:	4b25      	ldr	r3, [pc, #148]	@ (8002828 <HAL_RCC_ClockConfig+0x1b8>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0307 	and.w	r3, r3, #7
 8002798:	683a      	ldr	r2, [r7, #0]
 800279a:	429a      	cmp	r2, r3
 800279c:	d20c      	bcs.n	80027b8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800279e:	4b22      	ldr	r3, [pc, #136]	@ (8002828 <HAL_RCC_ClockConfig+0x1b8>)
 80027a0:	683a      	ldr	r2, [r7, #0]
 80027a2:	b2d2      	uxtb	r2, r2
 80027a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027a6:	4b20      	ldr	r3, [pc, #128]	@ (8002828 <HAL_RCC_ClockConfig+0x1b8>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0307 	and.w	r3, r3, #7
 80027ae:	683a      	ldr	r2, [r7, #0]
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d001      	beq.n	80027b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e032      	b.n	800281e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 0304 	and.w	r3, r3, #4
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d008      	beq.n	80027d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027c4:	4b19      	ldr	r3, [pc, #100]	@ (800282c <HAL_RCC_ClockConfig+0x1bc>)
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	4916      	ldr	r1, [pc, #88]	@ (800282c <HAL_RCC_ClockConfig+0x1bc>)
 80027d2:	4313      	orrs	r3, r2
 80027d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0308 	and.w	r3, r3, #8
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d009      	beq.n	80027f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027e2:	4b12      	ldr	r3, [pc, #72]	@ (800282c <HAL_RCC_ClockConfig+0x1bc>)
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	691b      	ldr	r3, [r3, #16]
 80027ee:	00db      	lsls	r3, r3, #3
 80027f0:	490e      	ldr	r1, [pc, #56]	@ (800282c <HAL_RCC_ClockConfig+0x1bc>)
 80027f2:	4313      	orrs	r3, r2
 80027f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80027f6:	f000 f821 	bl	800283c <HAL_RCC_GetSysClockFreq>
 80027fa:	4602      	mov	r2, r0
 80027fc:	4b0b      	ldr	r3, [pc, #44]	@ (800282c <HAL_RCC_ClockConfig+0x1bc>)
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	091b      	lsrs	r3, r3, #4
 8002802:	f003 030f 	and.w	r3, r3, #15
 8002806:	490a      	ldr	r1, [pc, #40]	@ (8002830 <HAL_RCC_ClockConfig+0x1c0>)
 8002808:	5ccb      	ldrb	r3, [r1, r3]
 800280a:	fa22 f303 	lsr.w	r3, r2, r3
 800280e:	4a09      	ldr	r2, [pc, #36]	@ (8002834 <HAL_RCC_ClockConfig+0x1c4>)
 8002810:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002812:	4b09      	ldr	r3, [pc, #36]	@ (8002838 <HAL_RCC_ClockConfig+0x1c8>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4618      	mov	r0, r3
 8002818:	f7fe fb86 	bl	8000f28 <HAL_InitTick>

  return HAL_OK;
 800281c:	2300      	movs	r3, #0
}
 800281e:	4618      	mov	r0, r3
 8002820:	3710      	adds	r7, #16
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	40023c00 	.word	0x40023c00
 800282c:	40023800 	.word	0x40023800
 8002830:	08003200 	.word	0x08003200
 8002834:	20000000 	.word	0x20000000
 8002838:	20000004 	.word	0x20000004

0800283c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800283c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002840:	b090      	sub	sp, #64	@ 0x40
 8002842:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002844:	2300      	movs	r3, #0
 8002846:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002848:	2300      	movs	r3, #0
 800284a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800284c:	2300      	movs	r3, #0
 800284e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002850:	2300      	movs	r3, #0
 8002852:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002854:	4b59      	ldr	r3, [pc, #356]	@ (80029bc <HAL_RCC_GetSysClockFreq+0x180>)
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	f003 030c 	and.w	r3, r3, #12
 800285c:	2b08      	cmp	r3, #8
 800285e:	d00d      	beq.n	800287c <HAL_RCC_GetSysClockFreq+0x40>
 8002860:	2b08      	cmp	r3, #8
 8002862:	f200 80a1 	bhi.w	80029a8 <HAL_RCC_GetSysClockFreq+0x16c>
 8002866:	2b00      	cmp	r3, #0
 8002868:	d002      	beq.n	8002870 <HAL_RCC_GetSysClockFreq+0x34>
 800286a:	2b04      	cmp	r3, #4
 800286c:	d003      	beq.n	8002876 <HAL_RCC_GetSysClockFreq+0x3a>
 800286e:	e09b      	b.n	80029a8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002870:	4b53      	ldr	r3, [pc, #332]	@ (80029c0 <HAL_RCC_GetSysClockFreq+0x184>)
 8002872:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002874:	e09b      	b.n	80029ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002876:	4b53      	ldr	r3, [pc, #332]	@ (80029c4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002878:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800287a:	e098      	b.n	80029ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800287c:	4b4f      	ldr	r3, [pc, #316]	@ (80029bc <HAL_RCC_GetSysClockFreq+0x180>)
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002884:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002886:	4b4d      	ldr	r3, [pc, #308]	@ (80029bc <HAL_RCC_GetSysClockFreq+0x180>)
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d028      	beq.n	80028e4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002892:	4b4a      	ldr	r3, [pc, #296]	@ (80029bc <HAL_RCC_GetSysClockFreq+0x180>)
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	099b      	lsrs	r3, r3, #6
 8002898:	2200      	movs	r2, #0
 800289a:	623b      	str	r3, [r7, #32]
 800289c:	627a      	str	r2, [r7, #36]	@ 0x24
 800289e:	6a3b      	ldr	r3, [r7, #32]
 80028a0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80028a4:	2100      	movs	r1, #0
 80028a6:	4b47      	ldr	r3, [pc, #284]	@ (80029c4 <HAL_RCC_GetSysClockFreq+0x188>)
 80028a8:	fb03 f201 	mul.w	r2, r3, r1
 80028ac:	2300      	movs	r3, #0
 80028ae:	fb00 f303 	mul.w	r3, r0, r3
 80028b2:	4413      	add	r3, r2
 80028b4:	4a43      	ldr	r2, [pc, #268]	@ (80029c4 <HAL_RCC_GetSysClockFreq+0x188>)
 80028b6:	fba0 1202 	umull	r1, r2, r0, r2
 80028ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80028bc:	460a      	mov	r2, r1
 80028be:	62ba      	str	r2, [r7, #40]	@ 0x28
 80028c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80028c2:	4413      	add	r3, r2
 80028c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80028c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028c8:	2200      	movs	r2, #0
 80028ca:	61bb      	str	r3, [r7, #24]
 80028cc:	61fa      	str	r2, [r7, #28]
 80028ce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028d2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80028d6:	f7fd fc77 	bl	80001c8 <__aeabi_uldivmod>
 80028da:	4602      	mov	r2, r0
 80028dc:	460b      	mov	r3, r1
 80028de:	4613      	mov	r3, r2
 80028e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80028e2:	e053      	b.n	800298c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028e4:	4b35      	ldr	r3, [pc, #212]	@ (80029bc <HAL_RCC_GetSysClockFreq+0x180>)
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	099b      	lsrs	r3, r3, #6
 80028ea:	2200      	movs	r2, #0
 80028ec:	613b      	str	r3, [r7, #16]
 80028ee:	617a      	str	r2, [r7, #20]
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80028f6:	f04f 0b00 	mov.w	fp, #0
 80028fa:	4652      	mov	r2, sl
 80028fc:	465b      	mov	r3, fp
 80028fe:	f04f 0000 	mov.w	r0, #0
 8002902:	f04f 0100 	mov.w	r1, #0
 8002906:	0159      	lsls	r1, r3, #5
 8002908:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800290c:	0150      	lsls	r0, r2, #5
 800290e:	4602      	mov	r2, r0
 8002910:	460b      	mov	r3, r1
 8002912:	ebb2 080a 	subs.w	r8, r2, sl
 8002916:	eb63 090b 	sbc.w	r9, r3, fp
 800291a:	f04f 0200 	mov.w	r2, #0
 800291e:	f04f 0300 	mov.w	r3, #0
 8002922:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002926:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800292a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800292e:	ebb2 0408 	subs.w	r4, r2, r8
 8002932:	eb63 0509 	sbc.w	r5, r3, r9
 8002936:	f04f 0200 	mov.w	r2, #0
 800293a:	f04f 0300 	mov.w	r3, #0
 800293e:	00eb      	lsls	r3, r5, #3
 8002940:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002944:	00e2      	lsls	r2, r4, #3
 8002946:	4614      	mov	r4, r2
 8002948:	461d      	mov	r5, r3
 800294a:	eb14 030a 	adds.w	r3, r4, sl
 800294e:	603b      	str	r3, [r7, #0]
 8002950:	eb45 030b 	adc.w	r3, r5, fp
 8002954:	607b      	str	r3, [r7, #4]
 8002956:	f04f 0200 	mov.w	r2, #0
 800295a:	f04f 0300 	mov.w	r3, #0
 800295e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002962:	4629      	mov	r1, r5
 8002964:	028b      	lsls	r3, r1, #10
 8002966:	4621      	mov	r1, r4
 8002968:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800296c:	4621      	mov	r1, r4
 800296e:	028a      	lsls	r2, r1, #10
 8002970:	4610      	mov	r0, r2
 8002972:	4619      	mov	r1, r3
 8002974:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002976:	2200      	movs	r2, #0
 8002978:	60bb      	str	r3, [r7, #8]
 800297a:	60fa      	str	r2, [r7, #12]
 800297c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002980:	f7fd fc22 	bl	80001c8 <__aeabi_uldivmod>
 8002984:	4602      	mov	r2, r0
 8002986:	460b      	mov	r3, r1
 8002988:	4613      	mov	r3, r2
 800298a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800298c:	4b0b      	ldr	r3, [pc, #44]	@ (80029bc <HAL_RCC_GetSysClockFreq+0x180>)
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	0c1b      	lsrs	r3, r3, #16
 8002992:	f003 0303 	and.w	r3, r3, #3
 8002996:	3301      	adds	r3, #1
 8002998:	005b      	lsls	r3, r3, #1
 800299a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800299c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800299e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80029a4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80029a6:	e002      	b.n	80029ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80029a8:	4b05      	ldr	r3, [pc, #20]	@ (80029c0 <HAL_RCC_GetSysClockFreq+0x184>)
 80029aa:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80029ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3740      	adds	r7, #64	@ 0x40
 80029b4:	46bd      	mov	sp, r7
 80029b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80029ba:	bf00      	nop
 80029bc:	40023800 	.word	0x40023800
 80029c0:	00f42400 	.word	0x00f42400
 80029c4:	017d7840 	.word	0x017d7840

080029c8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d101      	bne.n	80029da <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e041      	b.n	8002a5e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d106      	bne.n	80029f4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2200      	movs	r2, #0
 80029ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f7fe f980 	bl	8000cf4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2202      	movs	r2, #2
 80029f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	3304      	adds	r3, #4
 8002a04:	4619      	mov	r1, r3
 8002a06:	4610      	mov	r0, r2
 8002a08:	f000 f8f0 	bl	8002bec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2201      	movs	r2, #1
 8002a18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2201      	movs	r2, #1
 8002a28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2201      	movs	r2, #1
 8002a38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2201      	movs	r2, #1
 8002a48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2201      	movs	r2, #1
 8002a58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002a5c:	2300      	movs	r3, #0
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3708      	adds	r7, #8
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
	...

08002a68 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b086      	sub	sp, #24
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	60f8      	str	r0, [r7, #12]
 8002a70:	60b9      	str	r1, [r7, #8]
 8002a72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a74:	2300      	movs	r3, #0
 8002a76:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d101      	bne.n	8002a86 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002a82:	2302      	movs	r3, #2
 8002a84:	e0ae      	b.n	8002be4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2201      	movs	r2, #1
 8002a8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2b0c      	cmp	r3, #12
 8002a92:	f200 809f 	bhi.w	8002bd4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002a96:	a201      	add	r2, pc, #4	@ (adr r2, 8002a9c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a9c:	08002ad1 	.word	0x08002ad1
 8002aa0:	08002bd5 	.word	0x08002bd5
 8002aa4:	08002bd5 	.word	0x08002bd5
 8002aa8:	08002bd5 	.word	0x08002bd5
 8002aac:	08002b11 	.word	0x08002b11
 8002ab0:	08002bd5 	.word	0x08002bd5
 8002ab4:	08002bd5 	.word	0x08002bd5
 8002ab8:	08002bd5 	.word	0x08002bd5
 8002abc:	08002b53 	.word	0x08002b53
 8002ac0:	08002bd5 	.word	0x08002bd5
 8002ac4:	08002bd5 	.word	0x08002bd5
 8002ac8:	08002bd5 	.word	0x08002bd5
 8002acc:	08002b93 	.word	0x08002b93
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	68b9      	ldr	r1, [r7, #8]
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f000 f92e 	bl	8002d38 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	699a      	ldr	r2, [r3, #24]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f042 0208 	orr.w	r2, r2, #8
 8002aea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	699a      	ldr	r2, [r3, #24]
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f022 0204 	bic.w	r2, r2, #4
 8002afa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	6999      	ldr	r1, [r3, #24]
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	691a      	ldr	r2, [r3, #16]
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	430a      	orrs	r2, r1
 8002b0c:	619a      	str	r2, [r3, #24]
      break;
 8002b0e:	e064      	b.n	8002bda <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	68b9      	ldr	r1, [r7, #8]
 8002b16:	4618      	mov	r0, r3
 8002b18:	f000 f97e 	bl	8002e18 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	699a      	ldr	r2, [r3, #24]
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002b2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	699a      	ldr	r2, [r3, #24]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	6999      	ldr	r1, [r3, #24]
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	691b      	ldr	r3, [r3, #16]
 8002b46:	021a      	lsls	r2, r3, #8
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	430a      	orrs	r2, r1
 8002b4e:	619a      	str	r2, [r3, #24]
      break;
 8002b50:	e043      	b.n	8002bda <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	68b9      	ldr	r1, [r7, #8]
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f000 f9d3 	bl	8002f04 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	69da      	ldr	r2, [r3, #28]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f042 0208 	orr.w	r2, r2, #8
 8002b6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	69da      	ldr	r2, [r3, #28]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f022 0204 	bic.w	r2, r2, #4
 8002b7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	69d9      	ldr	r1, [r3, #28]
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	691a      	ldr	r2, [r3, #16]
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	430a      	orrs	r2, r1
 8002b8e:	61da      	str	r2, [r3, #28]
      break;
 8002b90:	e023      	b.n	8002bda <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	68b9      	ldr	r1, [r7, #8]
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f000 fa27 	bl	8002fec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	69da      	ldr	r2, [r3, #28]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002bac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	69da      	ldr	r2, [r3, #28]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002bbc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	69d9      	ldr	r1, [r3, #28]
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	691b      	ldr	r3, [r3, #16]
 8002bc8:	021a      	lsls	r2, r3, #8
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	430a      	orrs	r2, r1
 8002bd0:	61da      	str	r2, [r3, #28]
      break;
 8002bd2:	e002      	b.n	8002bda <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	75fb      	strb	r3, [r7, #23]
      break;
 8002bd8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002be2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3718      	adds	r7, #24
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}

08002bec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b085      	sub	sp, #20
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	4a43      	ldr	r2, [pc, #268]	@ (8002d0c <TIM_Base_SetConfig+0x120>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d013      	beq.n	8002c2c <TIM_Base_SetConfig+0x40>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c0a:	d00f      	beq.n	8002c2c <TIM_Base_SetConfig+0x40>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	4a40      	ldr	r2, [pc, #256]	@ (8002d10 <TIM_Base_SetConfig+0x124>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d00b      	beq.n	8002c2c <TIM_Base_SetConfig+0x40>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	4a3f      	ldr	r2, [pc, #252]	@ (8002d14 <TIM_Base_SetConfig+0x128>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d007      	beq.n	8002c2c <TIM_Base_SetConfig+0x40>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	4a3e      	ldr	r2, [pc, #248]	@ (8002d18 <TIM_Base_SetConfig+0x12c>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d003      	beq.n	8002c2c <TIM_Base_SetConfig+0x40>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	4a3d      	ldr	r2, [pc, #244]	@ (8002d1c <TIM_Base_SetConfig+0x130>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d108      	bne.n	8002c3e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	68fa      	ldr	r2, [r7, #12]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a32      	ldr	r2, [pc, #200]	@ (8002d0c <TIM_Base_SetConfig+0x120>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d02b      	beq.n	8002c9e <TIM_Base_SetConfig+0xb2>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c4c:	d027      	beq.n	8002c9e <TIM_Base_SetConfig+0xb2>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a2f      	ldr	r2, [pc, #188]	@ (8002d10 <TIM_Base_SetConfig+0x124>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d023      	beq.n	8002c9e <TIM_Base_SetConfig+0xb2>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a2e      	ldr	r2, [pc, #184]	@ (8002d14 <TIM_Base_SetConfig+0x128>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d01f      	beq.n	8002c9e <TIM_Base_SetConfig+0xb2>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4a2d      	ldr	r2, [pc, #180]	@ (8002d18 <TIM_Base_SetConfig+0x12c>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d01b      	beq.n	8002c9e <TIM_Base_SetConfig+0xb2>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a2c      	ldr	r2, [pc, #176]	@ (8002d1c <TIM_Base_SetConfig+0x130>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d017      	beq.n	8002c9e <TIM_Base_SetConfig+0xb2>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a2b      	ldr	r2, [pc, #172]	@ (8002d20 <TIM_Base_SetConfig+0x134>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d013      	beq.n	8002c9e <TIM_Base_SetConfig+0xb2>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4a2a      	ldr	r2, [pc, #168]	@ (8002d24 <TIM_Base_SetConfig+0x138>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d00f      	beq.n	8002c9e <TIM_Base_SetConfig+0xb2>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4a29      	ldr	r2, [pc, #164]	@ (8002d28 <TIM_Base_SetConfig+0x13c>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d00b      	beq.n	8002c9e <TIM_Base_SetConfig+0xb2>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4a28      	ldr	r2, [pc, #160]	@ (8002d2c <TIM_Base_SetConfig+0x140>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d007      	beq.n	8002c9e <TIM_Base_SetConfig+0xb2>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4a27      	ldr	r2, [pc, #156]	@ (8002d30 <TIM_Base_SetConfig+0x144>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d003      	beq.n	8002c9e <TIM_Base_SetConfig+0xb2>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a26      	ldr	r2, [pc, #152]	@ (8002d34 <TIM_Base_SetConfig+0x148>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d108      	bne.n	8002cb0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ca4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	68db      	ldr	r3, [r3, #12]
 8002caa:	68fa      	ldr	r2, [r7, #12]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	695b      	ldr	r3, [r3, #20]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	689a      	ldr	r2, [r3, #8]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a0e      	ldr	r2, [pc, #56]	@ (8002d0c <TIM_Base_SetConfig+0x120>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d003      	beq.n	8002cde <TIM_Base_SetConfig+0xf2>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4a10      	ldr	r2, [pc, #64]	@ (8002d1c <TIM_Base_SetConfig+0x130>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d103      	bne.n	8002ce6 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	691a      	ldr	r2, [r3, #16]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f043 0204 	orr.w	r2, r3, #4
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	68fa      	ldr	r2, [r7, #12]
 8002cfc:	601a      	str	r2, [r3, #0]
}
 8002cfe:	bf00      	nop
 8002d00:	3714      	adds	r7, #20
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr
 8002d0a:	bf00      	nop
 8002d0c:	40010000 	.word	0x40010000
 8002d10:	40000400 	.word	0x40000400
 8002d14:	40000800 	.word	0x40000800
 8002d18:	40000c00 	.word	0x40000c00
 8002d1c:	40010400 	.word	0x40010400
 8002d20:	40014000 	.word	0x40014000
 8002d24:	40014400 	.word	0x40014400
 8002d28:	40014800 	.word	0x40014800
 8002d2c:	40001800 	.word	0x40001800
 8002d30:	40001c00 	.word	0x40001c00
 8002d34:	40002000 	.word	0x40002000

08002d38 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b087      	sub	sp, #28
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6a1b      	ldr	r3, [r3, #32]
 8002d46:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6a1b      	ldr	r3, [r3, #32]
 8002d4c:	f023 0201 	bic.w	r2, r3, #1
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	699b      	ldr	r3, [r3, #24]
 8002d5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	f023 0303 	bic.w	r3, r3, #3
 8002d6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	68fa      	ldr	r2, [r7, #12]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	f023 0302 	bic.w	r3, r3, #2
 8002d80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	697a      	ldr	r2, [r7, #20]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	4a20      	ldr	r2, [pc, #128]	@ (8002e10 <TIM_OC1_SetConfig+0xd8>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d003      	beq.n	8002d9c <TIM_OC1_SetConfig+0x64>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	4a1f      	ldr	r2, [pc, #124]	@ (8002e14 <TIM_OC1_SetConfig+0xdc>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d10c      	bne.n	8002db6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	f023 0308 	bic.w	r3, r3, #8
 8002da2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	697a      	ldr	r2, [r7, #20]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	f023 0304 	bic.w	r3, r3, #4
 8002db4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4a15      	ldr	r2, [pc, #84]	@ (8002e10 <TIM_OC1_SetConfig+0xd8>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d003      	beq.n	8002dc6 <TIM_OC1_SetConfig+0x8e>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4a14      	ldr	r2, [pc, #80]	@ (8002e14 <TIM_OC1_SetConfig+0xdc>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d111      	bne.n	8002dea <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002dcc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002dd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	695b      	ldr	r3, [r3, #20]
 8002dda:	693a      	ldr	r2, [r7, #16]
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	699b      	ldr	r3, [r3, #24]
 8002de4:	693a      	ldr	r2, [r7, #16]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	693a      	ldr	r2, [r7, #16]
 8002dee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	68fa      	ldr	r2, [r7, #12]
 8002df4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	685a      	ldr	r2, [r3, #4]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	697a      	ldr	r2, [r7, #20]
 8002e02:	621a      	str	r2, [r3, #32]
}
 8002e04:	bf00      	nop
 8002e06:	371c      	adds	r7, #28
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr
 8002e10:	40010000 	.word	0x40010000
 8002e14:	40010400 	.word	0x40010400

08002e18 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b087      	sub	sp, #28
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
 8002e20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a1b      	ldr	r3, [r3, #32]
 8002e26:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6a1b      	ldr	r3, [r3, #32]
 8002e2c:	f023 0210 	bic.w	r2, r3, #16
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	699b      	ldr	r3, [r3, #24]
 8002e3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002e46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	021b      	lsls	r3, r3, #8
 8002e56:	68fa      	ldr	r2, [r7, #12]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	f023 0320 	bic.w	r3, r3, #32
 8002e62:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	011b      	lsls	r3, r3, #4
 8002e6a:	697a      	ldr	r2, [r7, #20]
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	4a22      	ldr	r2, [pc, #136]	@ (8002efc <TIM_OC2_SetConfig+0xe4>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d003      	beq.n	8002e80 <TIM_OC2_SetConfig+0x68>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	4a21      	ldr	r2, [pc, #132]	@ (8002f00 <TIM_OC2_SetConfig+0xe8>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d10d      	bne.n	8002e9c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002e86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	011b      	lsls	r3, r3, #4
 8002e8e:	697a      	ldr	r2, [r7, #20]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002e9a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	4a17      	ldr	r2, [pc, #92]	@ (8002efc <TIM_OC2_SetConfig+0xe4>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d003      	beq.n	8002eac <TIM_OC2_SetConfig+0x94>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	4a16      	ldr	r2, [pc, #88]	@ (8002f00 <TIM_OC2_SetConfig+0xe8>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d113      	bne.n	8002ed4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002eb2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002eba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	695b      	ldr	r3, [r3, #20]
 8002ec0:	009b      	lsls	r3, r3, #2
 8002ec2:	693a      	ldr	r2, [r7, #16]
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	699b      	ldr	r3, [r3, #24]
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	693a      	ldr	r2, [r7, #16]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	693a      	ldr	r2, [r7, #16]
 8002ed8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	68fa      	ldr	r2, [r7, #12]
 8002ede:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	685a      	ldr	r2, [r3, #4]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	697a      	ldr	r2, [r7, #20]
 8002eec:	621a      	str	r2, [r3, #32]
}
 8002eee:	bf00      	nop
 8002ef0:	371c      	adds	r7, #28
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr
 8002efa:	bf00      	nop
 8002efc:	40010000 	.word	0x40010000
 8002f00:	40010400 	.word	0x40010400

08002f04 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b087      	sub	sp, #28
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6a1b      	ldr	r3, [r3, #32]
 8002f12:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6a1b      	ldr	r3, [r3, #32]
 8002f18:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	69db      	ldr	r3, [r3, #28]
 8002f2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	f023 0303 	bic.w	r3, r3, #3
 8002f3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	68fa      	ldr	r2, [r7, #12]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002f4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	021b      	lsls	r3, r3, #8
 8002f54:	697a      	ldr	r2, [r7, #20]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4a21      	ldr	r2, [pc, #132]	@ (8002fe4 <TIM_OC3_SetConfig+0xe0>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d003      	beq.n	8002f6a <TIM_OC3_SetConfig+0x66>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	4a20      	ldr	r2, [pc, #128]	@ (8002fe8 <TIM_OC3_SetConfig+0xe4>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d10d      	bne.n	8002f86 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002f70:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	021b      	lsls	r3, r3, #8
 8002f78:	697a      	ldr	r2, [r7, #20]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002f84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4a16      	ldr	r2, [pc, #88]	@ (8002fe4 <TIM_OC3_SetConfig+0xe0>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d003      	beq.n	8002f96 <TIM_OC3_SetConfig+0x92>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4a15      	ldr	r2, [pc, #84]	@ (8002fe8 <TIM_OC3_SetConfig+0xe4>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d113      	bne.n	8002fbe <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002f9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002fa4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	695b      	ldr	r3, [r3, #20]
 8002faa:	011b      	lsls	r3, r3, #4
 8002fac:	693a      	ldr	r2, [r7, #16]
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	699b      	ldr	r3, [r3, #24]
 8002fb6:	011b      	lsls	r3, r3, #4
 8002fb8:	693a      	ldr	r2, [r7, #16]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	693a      	ldr	r2, [r7, #16]
 8002fc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	68fa      	ldr	r2, [r7, #12]
 8002fc8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	685a      	ldr	r2, [r3, #4]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	697a      	ldr	r2, [r7, #20]
 8002fd6:	621a      	str	r2, [r3, #32]
}
 8002fd8:	bf00      	nop
 8002fda:	371c      	adds	r7, #28
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr
 8002fe4:	40010000 	.word	0x40010000
 8002fe8:	40010400 	.word	0x40010400

08002fec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b087      	sub	sp, #28
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6a1b      	ldr	r3, [r3, #32]
 8002ffa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6a1b      	ldr	r3, [r3, #32]
 8003000:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	69db      	ldr	r3, [r3, #28]
 8003012:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800301a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003022:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	021b      	lsls	r3, r3, #8
 800302a:	68fa      	ldr	r2, [r7, #12]
 800302c:	4313      	orrs	r3, r2
 800302e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003036:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	031b      	lsls	r3, r3, #12
 800303e:	693a      	ldr	r2, [r7, #16]
 8003040:	4313      	orrs	r3, r2
 8003042:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	4a12      	ldr	r2, [pc, #72]	@ (8003090 <TIM_OC4_SetConfig+0xa4>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d003      	beq.n	8003054 <TIM_OC4_SetConfig+0x68>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	4a11      	ldr	r2, [pc, #68]	@ (8003094 <TIM_OC4_SetConfig+0xa8>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d109      	bne.n	8003068 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800305a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	695b      	ldr	r3, [r3, #20]
 8003060:	019b      	lsls	r3, r3, #6
 8003062:	697a      	ldr	r2, [r7, #20]
 8003064:	4313      	orrs	r3, r2
 8003066:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	697a      	ldr	r2, [r7, #20]
 800306c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	68fa      	ldr	r2, [r7, #12]
 8003072:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	685a      	ldr	r2, [r3, #4]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	693a      	ldr	r2, [r7, #16]
 8003080:	621a      	str	r2, [r3, #32]
}
 8003082:	bf00      	nop
 8003084:	371c      	adds	r7, #28
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr
 800308e:	bf00      	nop
 8003090:	40010000 	.word	0x40010000
 8003094:	40010400 	.word	0x40010400

08003098 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003098:	b480      	push	{r7}
 800309a:	b085      	sub	sp, #20
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d101      	bne.n	80030b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80030ac:	2302      	movs	r3, #2
 80030ae:	e05a      	b.n	8003166 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2201      	movs	r2, #1
 80030b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2202      	movs	r2, #2
 80030bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	68fa      	ldr	r2, [r7, #12]
 80030de:	4313      	orrs	r3, r2
 80030e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	68fa      	ldr	r2, [r7, #12]
 80030e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a21      	ldr	r2, [pc, #132]	@ (8003174 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d022      	beq.n	800313a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030fc:	d01d      	beq.n	800313a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a1d      	ldr	r2, [pc, #116]	@ (8003178 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d018      	beq.n	800313a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a1b      	ldr	r2, [pc, #108]	@ (800317c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d013      	beq.n	800313a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a1a      	ldr	r2, [pc, #104]	@ (8003180 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d00e      	beq.n	800313a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a18      	ldr	r2, [pc, #96]	@ (8003184 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d009      	beq.n	800313a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a17      	ldr	r2, [pc, #92]	@ (8003188 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d004      	beq.n	800313a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a15      	ldr	r2, [pc, #84]	@ (800318c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d10c      	bne.n	8003154 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003140:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	68ba      	ldr	r2, [r7, #8]
 8003148:	4313      	orrs	r3, r2
 800314a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	68ba      	ldr	r2, [r7, #8]
 8003152:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2201      	movs	r2, #1
 8003158:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2200      	movs	r2, #0
 8003160:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003164:	2300      	movs	r3, #0
}
 8003166:	4618      	mov	r0, r3
 8003168:	3714      	adds	r7, #20
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr
 8003172:	bf00      	nop
 8003174:	40010000 	.word	0x40010000
 8003178:	40000400 	.word	0x40000400
 800317c:	40000800 	.word	0x40000800
 8003180:	40000c00 	.word	0x40000c00
 8003184:	40010400 	.word	0x40010400
 8003188:	40014000 	.word	0x40014000
 800318c:	40001800 	.word	0x40001800

08003190 <memset>:
 8003190:	4402      	add	r2, r0
 8003192:	4603      	mov	r3, r0
 8003194:	4293      	cmp	r3, r2
 8003196:	d100      	bne.n	800319a <memset+0xa>
 8003198:	4770      	bx	lr
 800319a:	f803 1b01 	strb.w	r1, [r3], #1
 800319e:	e7f9      	b.n	8003194 <memset+0x4>

080031a0 <__libc_init_array>:
 80031a0:	b570      	push	{r4, r5, r6, lr}
 80031a2:	4d0d      	ldr	r5, [pc, #52]	@ (80031d8 <__libc_init_array+0x38>)
 80031a4:	4c0d      	ldr	r4, [pc, #52]	@ (80031dc <__libc_init_array+0x3c>)
 80031a6:	1b64      	subs	r4, r4, r5
 80031a8:	10a4      	asrs	r4, r4, #2
 80031aa:	2600      	movs	r6, #0
 80031ac:	42a6      	cmp	r6, r4
 80031ae:	d109      	bne.n	80031c4 <__libc_init_array+0x24>
 80031b0:	4d0b      	ldr	r5, [pc, #44]	@ (80031e0 <__libc_init_array+0x40>)
 80031b2:	4c0c      	ldr	r4, [pc, #48]	@ (80031e4 <__libc_init_array+0x44>)
 80031b4:	f000 f818 	bl	80031e8 <_init>
 80031b8:	1b64      	subs	r4, r4, r5
 80031ba:	10a4      	asrs	r4, r4, #2
 80031bc:	2600      	movs	r6, #0
 80031be:	42a6      	cmp	r6, r4
 80031c0:	d105      	bne.n	80031ce <__libc_init_array+0x2e>
 80031c2:	bd70      	pop	{r4, r5, r6, pc}
 80031c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80031c8:	4798      	blx	r3
 80031ca:	3601      	adds	r6, #1
 80031cc:	e7ee      	b.n	80031ac <__libc_init_array+0xc>
 80031ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80031d2:	4798      	blx	r3
 80031d4:	3601      	adds	r6, #1
 80031d6:	e7f2      	b.n	80031be <__libc_init_array+0x1e>
 80031d8:	08003220 	.word	0x08003220
 80031dc:	08003220 	.word	0x08003220
 80031e0:	08003220 	.word	0x08003220
 80031e4:	08003228 	.word	0x08003228

080031e8 <_init>:
 80031e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031ea:	bf00      	nop
 80031ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031ee:	bc08      	pop	{r3}
 80031f0:	469e      	mov	lr, r3
 80031f2:	4770      	bx	lr

080031f4 <_fini>:
 80031f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031f6:	bf00      	nop
 80031f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031fa:	bc08      	pop	{r3}
 80031fc:	469e      	mov	lr, r3
 80031fe:	4770      	bx	lr
